{"version":3,"sources":["types/index.ts","assets/naver_login_eng.png","context/user/userContext.tsx","assets/logo1.svg","components/loginModal.tsx","context/socket/socketContext.tsx","context/socket/hooks.tsx","context/socket/socketProvider.tsx","context/lecture/lectureContext.tsx","components/leftmenu/leftmenubutton.tsx","components/leftmenu/leftmenutab.tsx","context/language/languageContext.tsx","components/leftmenu/leftmenu.tsx","data/leftmenuData.ts","components/floatConnectionStatus.tsx","components/common/Icon.tsx","components/common/Button.tsx","components/common/playlist.ts","components/lecturecarousel/lecturecard.tsx","components/lecturecarousel/lecturecarousel.tsx","components/youtube.tsx","pages/classPage.tsx","components/timeMarker.tsx","components/chat.tsx","components/chatMessage.tsx","components/common/icons.tsx","hooks/useParsedClassLectureId.tsx","components/audioRecorder.tsx","components/chatInput.tsx","components/common/Header.tsx","hooks/useMe.tsx","components/lobbyPage/classAddModal.tsx","pages/lecturePage.tsx","components/lobbyPage/classAddModalContents.tsx","components/lobbyPage/lobbyContent.tsx","components/lobbyPage/classCard.tsx","hooks/useClasses.tsx","assets/logo2.svg","components/lobbyPage/banner.tsx","pages/lobbyPage.tsx","components/classroomPage/createLecture/lectureTitle.tsx","components/classroomPage/createLecture/lectureNotice.tsx","components/classroomPage/createLecture/lectureTime.tsx","components/classroomPage/createLecture/addPlaylist.tsx","components/classroomPage/createLecture/addQuizModal.tsx","components/classroomPage/AddLecturePage.tsx","App.tsx","serviceWorkerRegistration.ts","reportWebVitals.ts","context/user/userProvider.tsx","context/lecture/lectureProvider.tsx","context/language/languageProvider.tsx","index.tsx"],"names":["MemberType","UserLoadStatus","MarkerType","LanguageType","TabType","MenuContext","UserContext","createContext","userName","status","LOADED","id","NaverLoginButton","props","w","h","colorScheme","src","NaverLoginButtonAsset","fit","LoginModal","useContext","size","isOpen","onClose","console","log","LOADING","LogoAsset","alt","textAlign","fontSize","fontWeight","display","onClick","window","location","pathname","SocketContext","getSocket","getConnected","getError","subscribeEvent","getEventMsg","useSocket","socket","connected","error","SocketProvider","url","children","options","debug","useState","setSocket","setConnected","setError","eventMsgRecord","setEventMsgRecord","useEffect","newSocket","io","on","removeAllListeners","err","onAny","event","any","disconnect","Provider","value","msg","setEventMsg","defaultProps","lectureContext","isLive","setIsLive","selectedVidIdx","setSelectedVidIdx","LeftMenuButton","entry","useParams","memberType","classUuid","lectureId","LectureContext","shouldHighlight","type","VIDEO","videoIdx","as","height","lineHeight","transition","border","px","borderRadius","bg","borderColor","color","overflow","whiteSpace","_hover","_active","transform","_focus","boxShadow","USER","STUDENT","INSTRUCTOR","onClickHandler","NOTICE","style","scrollbarWidth","tabName","LeftMenuTab","tabTitle","tabContents","spacing","letterSpacing","justifyContent","ml","mt","map","tab","langContext","language","KO","setLanguage","GlobeIcon","createIcon","displayName","path","xmlns","width","viewBox","d","LeftMenu","menus","memuContext","LangContext","navigate","useNavigate","flexDir","overflowX","overflowY","divider","align","menu","p","backgroundColor","bottom","icon","m","Lecture","emit","parseInt","placement","marginRight","EN","deafultEntries","FloatConnectionStatus","position","left","zIndex","alignContent","opacity","FlagIcon","className","version","x","y","xmlSpace","ClipboardButton","leftIcon","CreateMarkerButtons","QUESTION","DISCUSSION","dotenv","getPlayListItems","playlistID","a","axios","get","params","part","maxResults","playlistId","key","process","result","data","breakpoints","createBreakpoints","sm","md","lg","xl","LectureCard","extendTheme","lectureNum","youtubePlayList","date","to","lectureName","thumbnailUrl","setThumbnailUrl","then","v","items","snippet","thumbnails","standard","rounded","bgColor","flexDirection","ratio","useColorModeValue","base","fontFamily","SwiperCore","use","Navigation","Pagination","Scrollbar","A11y","Mousewheel","Keyboard","VideoState","LectureCarousel","lectureList","centeredSlides","spaceBetween","slidesPerView","navigation","mousewheel","keyboard","pagination","clickable","renderBullet","index","lectureDate","LiveStatus","playlist","slice","ClassPage","setLectureList","useClipboard","onCopy","hasCopied","toast","useToast","memberTypeEntry","message","noticeTabSegment","defaultNoticeTabEntries","memberArr","setMemberArr","memberTabSegment","payload","instructor","response","lecture","lecList","members","newMemList","mem","userId","lectures","Class","title","duration","isClosable","FlagSVG","fill","stroke","strokeWidth","TimeMarker","time","markerType","videoIndex","markerId","onClickEvt","markerT","Error","colorPick","ChatMode","YouTubePlayer","videoId","isControled","video","setVideo","videoCurrent","setVideoCurrent","videoDuration","useRef","intervalID","videoWrapper","videoTimelineWrapper","markers","setMarkers","current","classList","add","cover","remove","uncover","newtime","seekTo","playVideo","pauseVideo","responseMarkers","marker","markerArr","clearInterval","off","toString","playerVars","autoplay","controls","disablekb","rel","coverStyles","backgroundImage","backgroundSize","ref","curTime","getCurrentTime","opts","onReady","evt","target","onPlay","playerInfo","setInterval","onPause","onStateChange","player","JO","BUFFERING","PLAYING","PAUSED","Message","maxWidth","marginBottom","Time","marginTop","Username","mb","ChatMessage","isMy","CircleIcon","useParsedClassLectureIds","AudioRecorder","audioStream","setAudioStream","media","setMedia","onRec","setOnRec","source","setSource","audioAnalyser","setAudioAnalyser","audioUrl","setAudioUrl","arrayBuffer","blob","senderId","Blob","Uint8Array","URL","createObjectURL","Audio","play","onSubmitAudioFile","useCallback","sound","File","lastModified","Date","getTime","audioCtx","AudioContext","analyser","createScriptProcessor","navigator","mediaDevices","getUserMedia","audio","stream","mediaRecorder","MediaRecorder","start","createMediaStreamSource","connect","destination","makeSound","onaudioprocess","e","playbackTime","getAudioTracks","forEach","track","stop","ondataavailable","blobEvent","ChatInput","sendMessage","setMessage","document","addEventListener","keydownEvents","removeEventListener","shiftKey","code","preventDefault","placeholder","rows","resize","onChange","Header","headingSize","headingText","justify","useMe","ClassAddModalState","Chat","hasHeader","customHeader","messages","setMessages","chatStatus","chatMode","Live","currentMarkerId","myId","header","chatStat","Marker","Individual","peer","name","pickHeader","createNewMessageObj","messageResponse","dateStr","senderName","text","messageId","dateObj","getHours","getMinutes","textMessages","arr","retrievedMessages","savedMessage","marginLeft","pb","pt","ko","en","trim","length","markerTextMessage","createMessage","LecturePage","setLecture","EMPTY_HANDLER","videoArr","setVideoArr","videoTabSegment","noticeArr","setNoticeArr","parsedLectureId","toggleLiveButton","notifyLiveButton","videoList","element","idx","push","link","resourceId","selectedVideoIdx","user","lec","newUser","liveStatus","initContent","setModalState","JOIN","CREATE","joinContent","onChangejoinUUID","handleJoin","onModalClose","mr","createContent","onChangeTitle","onChangeSubtitle","handleCreate","AddClassModal","addClass","React","INIT","modalState","setTitle","subtitle","setSubtitle","joinClassUUID","setJoinUUID","alignItems","fetch","method","headers","body","JSON","stringify","uuid","r","json","j","class","catch","LobbyContent","col","gridTemplateRows","gridTemplateColumns","ClassCard","imgSrc","subTitle","classColor","stc","regexColor","exec","isDark","cursor","direction","pl","useClasses","classes","setClasses","newClass","classArr","settings","dots","arrows","fade","infinite","speed","autoplaySpeed","slidesToShow","slidesToScroll","LobbyBanner","slider","setSlider","top","useBreakpointValue","side","variant","slickPrev","right","slickNext","slider_","image","card","backgroundPosition","backgroundRepeat","maxW","LobbyPage","useDisclosure","onOpen","filter","LectureTitle","onChangeLecturetitle","focusBorderColor","LectureNotice","onChangeLectureNotice","LectureTime","setLectureDate","selected","showTimeSelect","timeFormat","timeIntervals","timeCaption","dateFormat","AddPlayList","onChangeLecturePlaylist","Lecturelink","setLecturequizlist","Youtubelist","quiztime","problem","answer","newquiz","mark","AddQuizModal","isAddopen","onAddopen","onAddclose","onChangeLectureproblem","onChangeLectureanswer","onChangeLecturequiztime","Lectureproblem","Lectureanswer","Lecturequiztime","setQurrentnumber","Lecturequizlist","Qurrentnumber","tempquizlist","AddLecturePage","lectureTitle","setLectureTitle","setLectureNotice","lecturePlaylist","setLecturePlaylist","setLecturequiztime","setLectureproblem","setLectureanswer","Lecturequizhead","onClickRemove","removequiz","i","showQuiz","item","showQuizhead","App","Boolean","hostname","match","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","UserProvider","setUserName","setUserStatus","setId","NOTLOADED","langProvider","ReactDOM","render","StrictMode","getElementById","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.a83019d3.chunk.js","sourcesContent":["export interface Class {\r\n  uuid: string;\r\n  title: string;\r\n  subtitle: string;\r\n  memberType: MemberType;\r\n}\r\n\r\nexport interface Lecture {\r\n  id: number;\r\n  lectureDate: string;\r\n  lectureName: string;\r\n  playlist: string;\r\n  LiveStatus: boolean;\r\n}\r\n\r\nexport interface Member {\r\n  id: number;\r\n  userName: string;\r\n  memberType: MemberType;\r\n  language: string;\r\n}\r\n\r\nexport enum MemberType {\r\n  INSTRUCTOR = 'instructor',\r\n  STUDENT = 'student'\r\n}\r\n\r\nexport enum UserLoadStatus {\r\n  LOADED,\r\n  LOADING,\r\n  NOTLOADED\r\n}\r\n\r\nexport enum MarkerType {\r\n  QUESTION = 'Question',\r\n  DISCUSSION = 'Discussion'\r\n}\r\n\r\nexport interface MessageResponse {\r\n  messageId: number;\r\n  senderId: number;\r\n  senderName: string;\r\n  dateStr: string;\r\n}\r\n\r\nexport interface TextMessageResponse extends MessageResponse {\r\n  text: {\r\n    ko: { result: string; status: number };\r\n    en: { result: string; status: number };\r\n  };\r\n}\r\n\r\nexport interface AudioMessageResponse extends MessageResponse {\r\n  url: string;\r\n}\r\n\r\nexport interface Marker {\r\n  id: number;\r\n  markerType: MarkerType;\r\n  time: number;\r\n  videoIndex: number;\r\n  messages: MessageResponse[];\r\n}\r\n\r\nexport enum LanguageType {\r\n  EN = 'en',\r\n  KO = 'ko'\r\n}\r\n\r\n// LeftMenu tabs\r\nexport enum TabType {\r\n  USER = 'user',\r\n  VIDEO = 'video',\r\n  NOTICE = 'notice'\r\n}\r\n\r\ninterface BaseTabEntry {\r\n  tabName: string;\r\n  type: TabType;\r\n  onClickHandler?: (...args: any[]) => void;\r\n}\r\n\r\nexport interface UserTabEntry extends BaseTabEntry {\r\n  userId: number;\r\n}\r\n\r\nexport interface VideoTabEntry extends BaseTabEntry {\r\n  videoIdx: number;\r\n  link: string;\r\n}\r\n\r\nexport interface NoticeTabEntry extends BaseTabEntry {\r\n  message: string;\r\n}\r\n\r\nexport type TabEntry = UserTabEntry | VideoTabEntry | NoticeTabEntry;\r\n\r\nexport interface TabSegment {\r\n  tabTitle: string;\r\n  tabContents: TabEntry[];\r\n}\r\n\r\nexport enum MenuContext {\r\n  Lecture,\r\n  Class\r\n}\r\n","export default __webpack_public_path__ + \"static/media/naver_login_eng.69b5671c.png\";","import { createContext } from 'react';\r\nimport { UserLoadStatus } from '../../types';\r\n\r\ninterface UserContextInterface {\r\n  userName: string;\r\n  status: UserLoadStatus;\r\n  id: number;\r\n}\r\n\r\nconst UserContext = createContext<UserContextInterface>({\r\n  userName: '',\r\n  status: UserLoadStatus.LOADED,\r\n  id: -1\r\n});\r\n\r\nexport default UserContext;\r\n","export default __webpack_public_path__ + \"static/media/logo1.23d60d6d.svg\";","import React, { useContext } from 'react';\r\nimport {\r\n  Box,\r\n  Flex,\r\n  VStack,\r\n  Spacer,\r\n  Modal,\r\n  ModalBody,\r\n  ModalContent,\r\n  Button,\r\n  Image,\r\n  ModalOverlay,\r\n  ModalHeader,\r\n  Spinner\r\n} from '@chakra-ui/react';\r\n\r\nimport NaverLoginButtonAsset from '../assets/naver_login_eng.png';\r\nimport UserContext from '../context/user/userContext';\r\nimport { UserLoadStatus } from '../types';\r\nimport LogoAsset from '../assets/logo1.svg';\r\n\r\nconst NaverLoginButton = ({ ...props }) => {\r\n  return (\r\n    <Button w={460} h={100} colorScheme=\"white\" {...props}>\r\n      <Image src={NaverLoginButtonAsset} fit=\"fill\" />\r\n    </Button>\r\n  );\r\n};\r\n\r\nconst LoginModal = () => {\r\n  const { status } = useContext(UserContext);\r\n\r\n  return (\r\n    <Modal\r\n      size=\"xl\"\r\n      isOpen={status !== UserLoadStatus.LOADED}\r\n      onClose={() => {\r\n        console.log();\r\n      }}\r\n    >\r\n      <ModalOverlay />\r\n      {status === UserLoadStatus.LOADING ? (\r\n        <Spinner />\r\n      ) : (\r\n        <ModalContent>\r\n          <ModalHeader>\r\n            <VStack w=\"100%\">\r\n              <Flex w=\"100%\" h=\"60px\">\r\n                <Spacer />\r\n                <Image src={LogoAsset} alt=\"liveclass\" h=\"60px\" />\r\n                <Spacer />\r\n              </Flex>\r\n              <Box\r\n                w=\"100%\"\r\n                textAlign=\"center\"\r\n                fontSize=\"50px\"\r\n                fontWeight=\"bold\"\r\n              >\r\n                LOG IN\r\n              </Box>\r\n            </VStack>\r\n          </ModalHeader>\r\n          <ModalBody>\r\n            <Flex>\r\n              <Box w=\"100%\" display=\"flex\">\r\n                <Spacer />\r\n                <NaverLoginButton\r\n                  onClick={() => {\r\n                    window.location.pathname = '/api/auth/naver';\r\n                  }}\r\n                />\r\n                <Spacer />\r\n              </Box>\r\n            </Flex>\r\n          </ModalBody>\r\n        </ModalContent>\r\n      )}\r\n    </Modal>\r\n  );\r\n};\r\n\r\nexport default LoginModal;\r\n","import { createContext } from 'react';\r\nimport { SocketContextInterface } from './types';\r\n\r\nconst SocketContext = createContext<SocketContextInterface>({\r\n  getSocket: () => null,\r\n  getConnected: () => false,\r\n  getError: () => undefined,\r\n  subscribeEvent: () => undefined,\r\n  getEventMsg: () => ''\r\n});\r\n\r\nexport default SocketContext;\r\n","import { useContext, useEffect } from 'react';\r\nimport SocketContext from './socketContext';\r\n\r\nconst useSocket = () => {\r\n  const { getSocket, getConnected, getError } = useContext(SocketContext);\r\n\r\n  const socket = getSocket();\r\n  const connected = getConnected();\r\n  const error = getError();\r\n\r\n  return { socket, connected, error };\r\n};\r\n\r\nconst useSocketEvent = (event: string) => {\r\n  const { subscribeEvent, getEventMsg, getSocket, getConnected } =\r\n    useContext(SocketContext);\r\n\r\n  useEffect(() => {\r\n    subscribeEvent(event);\r\n  });\r\n\r\n  const msg = getEventMsg(event);\r\n  const sendMsg = (msgToSend: string) => {\r\n    getSocket()?.emit(event, msgToSend);\r\n  };\r\n  const connected = getConnected();\r\n\r\n  return { msg, sendMsg, connected };\r\n};\r\n\r\nexport { useSocket, useSocketEvent };\r\n","import React, { useEffect, useState } from 'react';\r\nimport { io, Socket } from 'socket.io-client';\r\nimport SocketContext from './socketContext';\r\nimport { SocketOptionType } from './types';\r\n\r\nSocketProvider.defaultProps = {\r\n  options: null\r\n};\r\n\r\nfunction SocketProvider({\r\n  url,\r\n  children,\r\n  options,\r\n  debug = true\r\n}: {\r\n  url: string;\r\n  children: any;\r\n  options?: SocketOptionType;\r\n  debug?: boolean;\r\n}) {\r\n  const [socket, setSocket] = useState<Socket | null>(null);\r\n  const [connected, setConnected] = useState(false);\r\n  const [error, setError] = useState(null);\r\n\r\n  const [eventMsgRecord, setEventMsgRecord] = useState<Record<string, string>>(\r\n    {}\r\n  );\r\n\r\n  useEffect(() => {\r\n    const newSocket: Socket = io(url, options);\r\n    setSocket(newSocket);\r\n\r\n    newSocket.on('connect', () => {\r\n      setConnected(true);\r\n    });\r\n\r\n    newSocket.on('disconnect', () => {\r\n      newSocket.removeAllListeners();\r\n      setConnected(false);\r\n    });\r\n\r\n    newSocket.on('error', err => {\r\n      setError(err);\r\n    });\r\n\r\n    if (debug) {\r\n      newSocket.onAny((event, ...any) => {\r\n        console.log(event, any);\r\n      });\r\n    }\r\n\r\n    return () => {\r\n      setSocket(null);\r\n      newSocket.disconnect();\r\n    };\r\n  }, [url, options]);\r\n\r\n  const getSocket = () => socket;\r\n  const getConnected = () => connected;\r\n  const getError = () => error;\r\n\r\n  const setEventMsg = (event: string, msg: string) => {\r\n    setEventMsgRecord({ ...eventMsgRecord, [event]: msg });\r\n  };\r\n  const subscribeEvent = (event: string) => {\r\n    socket?.on(event, (msg: string) => {\r\n      setEventMsg(event, msg);\r\n    });\r\n  };\r\n  const getEventMsg = (event: string) => eventMsgRecord[event];\r\n\r\n  return (\r\n    <SocketContext.Provider\r\n      value={{\r\n        getSocket,\r\n        getConnected,\r\n        getError,\r\n        subscribeEvent,\r\n        getEventMsg\r\n      }}\r\n    >\r\n      {children}\r\n    </SocketContext.Provider>\r\n  );\r\n}\r\n\r\nexport default SocketProvider;\r\n","import { createContext } from 'react';\r\n\r\ninterface langContextInterface {\r\n  isLive: boolean;\r\n  setIsLive: (status: boolean) => void;\r\n  selectedVidIdx: number;\r\n  setSelectedVidIdx: (idx: number) => void;\r\n}\r\n\r\nconst lectureContext = createContext<langContextInterface>({\r\n  isLive: false,\r\n  setIsLive: () => null,\r\n  selectedVidIdx: 0,\r\n  setSelectedVidIdx: () => null\r\n});\r\n\r\nexport default lectureContext;\r\n","import React, { useContext } from 'react';\r\nimport { useParams } from 'react-router';\r\nimport { Box } from '@chakra-ui/react';\r\n\r\nimport { MemberType, TabType } from '../../types';\r\n\r\nimport LectureContext from '../../context/lecture/lectureContext';\r\n\r\nconst LeftMenuButton = ({ entry }: any) => {\r\n  const { classUuid, memberType, lectureId } = useParams();\r\n  const { isLive, selectedVidIdx, setSelectedVidIdx } =\r\n    useContext(LectureContext);\r\n\r\n  let shouldHighlight = false;\r\n  if (entry.type === TabType.VIDEO)\r\n    shouldHighlight = entry.videoIdx === selectedVidIdx;\r\n\r\n  const eventHandler = () => {\r\n    switch (entry.type) {\r\n      case TabType.USER:\r\n        // alert(entry.userId);\r\n        break;\r\n      case TabType.VIDEO:\r\n        if (memberType === MemberType.STUDENT && isLive) return;\r\n        setSelectedVidIdx(entry.videoIdx);\r\n        if (memberType === MemberType.INSTRUCTOR && isLive) {\r\n          entry.onClickHandler(); // socket?.emit('SelectVideo', ...) - control others' video\r\n        }\r\n        break;\r\n      case TabType.NOTICE:\r\n        if (entry.onClickHandler) entry.onClickHandler();\r\n        // else alert(entry.message);\r\n        break;\r\n      default:\r\n        break;\r\n    }\r\n  };\r\n\r\n  return (\r\n    <Box\r\n      as=\"button\"\r\n      height=\"30px\"\r\n      lineHeight=\"1.1\"\r\n      transition=\"all 0.2s cubic-bezier(.08,.52,.52,1)\"\r\n      border=\"1px\"\r\n      px=\"8px\"\r\n      borderRadius=\"2px\"\r\n      fontSize=\"20px\"\r\n      textAlign=\"start\"\r\n      bg=\"white\"\r\n      borderColor={shouldHighlight ? '#FF4A3E' : 'white'}\r\n      color=\"black\"\r\n      overflow=\"hidden\"\r\n      whiteSpace=\"nowrap\"\r\n      _hover={{ bg: '#ebedf0' }}\r\n      _active={{\r\n        bg: '#dddfe2',\r\n        transform: 'scale(0.98)',\r\n        borderColor: '#bec3c9'\r\n      }}\r\n      _focus={{\r\n        boxShadow:\r\n          '0 0 1px 2px rgba(88, 144, 255, .75), 0 1px 1px rgba(0, 0, 0, .15)'\r\n      }}\r\n      onClick={eventHandler}\r\n      style={{ scrollbarWidth: 'none' }}\r\n    >\r\n      {entry.tabName}\r\n    </Box>\r\n  );\r\n};\r\n\r\nexport default LeftMenuButton;\r\n","import React from 'react';\r\nimport { Stack, Box, Button } from '@chakra-ui/react';\r\nimport { TabSegment, TabEntry } from '../../types';\r\nimport LeftMenuButton from './leftmenubutton';\r\n\r\nconst LeftMenuTab = ({ tabTitle, tabContents }: TabSegment) => {\r\n  return (\r\n    <Box w=\"175px\">\r\n      <Stack spacing={0}>\r\n        <Box\r\n          letterSpacing=\"wide\"\r\n          justifyContent=\"flex-start\"\r\n          fontWeight=\"bold\"\r\n          fontSize=\"18px\"\r\n          ml=\"2\"\r\n          mt=\"2\"\r\n          overflow=\"hidden\"\r\n          whiteSpace=\"nowrap\"\r\n        >\r\n          {tabTitle}\r\n        </Box>\r\n        <Box w=\"100%\" h=\"3px\" />\r\n        {tabContents.map((tab: TabEntry) => {\r\n          return (\r\n            <>\r\n              <LeftMenuButton entry={tab} />\r\n              <Box w=\"100%\" h=\"3px\" />\r\n            </>\r\n          );\r\n        })}\r\n      </Stack>\r\n    </Box>\r\n  );\r\n};\r\n\r\nexport default LeftMenuTab;\r\n","import { createContext } from 'react';\r\nimport { LanguageType } from '../../types';\r\n\r\ninterface langContextInterface {\r\n  language: LanguageType;\r\n  setLanguage: (language: LanguageType) => void;\r\n}\r\n\r\nconst langContext = createContext<langContextInterface>({\r\n  language: LanguageType.KO,\r\n  setLanguage: () => null\r\n});\r\n\r\nexport default langContext;\r\n","import React, { useContext } from 'react';\r\nimport {\r\n  ChevronRightIcon,\r\n  CloseIcon,\r\n  SettingsIcon,\r\n  createIcon\r\n} from '@chakra-ui/icons';\r\nimport {\r\n  Box,\r\n  Button,\r\n  Flex,\r\n  StackDivider,\r\n  VStack,\r\n  IconButton,\r\n  Portal,\r\n  Popover,\r\n  PopoverTrigger,\r\n  PopoverContent,\r\n  PopoverBody,\r\n  PopoverCloseButton,\r\n  PopoverArrow,\r\n  Spacer\r\n} from '@chakra-ui/react';\r\n\r\nimport { useNavigate, useParams } from 'react-router-dom';\r\nimport { LanguageType, MenuContext, TabSegment } from '../../types';\r\nimport LeftMenuTab from './leftmenutab';\r\nimport LangContext from '../../context/language/languageContext';\r\nimport { useSocket } from '../../context/socket';\r\n\r\ninterface LeftMenuProps {\r\n  menus: TabSegment[];\r\n  memuContext: MenuContext;\r\n}\r\n\r\nconst GlobeIcon = createIcon({\r\n  displayName: 'GlobeIcon',\r\n  path: (\r\n    <svg\r\n      xmlns=\"http://www.w3.org/2000/svg\"\r\n      width=\"24\"\r\n      height=\"24\"\r\n      viewBox=\"0 0 24 24\"\r\n    >\r\n      <path d=\"M24 24h-2.784l-1.07-3h-4.875l-1.077 3h-2.697l4.941-13h2.604l4.958 13zm-4.573-5.069l-1.705-4.903-1.712 4.903h3.417zm-9.252-12.804c.126-.486.201-.852.271-1.212l-2.199-.428c-.036.185-.102.533-.22 1-.742-.109-1.532-.122-2.332-.041.019-.537.052-1.063.098-1.569h2.456v-2.083h-2.161c.106-.531.198-.849.288-1.149l-2.147-.645c-.158.526-.29 1.042-.422 1.794h-2.451v2.083h2.184c-.058.673-.093 1.371-.103 2.077-2.413.886-3.437 2.575-3.437 4.107 0 1.809 1.427 3.399 3.684 3.194 2.802-.255 4.673-2.371 5.77-4.974 1.134.654 1.608 1.753 1.181 2.771-.396.941-1.561 1.838-3.785 1.792v2.242c2.469.038 4.898-.899 5.85-3.166.93-2.214-.132-4.635-2.525-5.793zm-2.892 1.531c-.349.774-.809 1.544-1.395 2.15-.09-.646-.151-1.353-.184-2.108.533-.07 1.072-.083 1.579-.042zm-3.788.724c.062.947.169 1.818.317 2.596-1.996.365-2.076-1.603-.317-2.596zm11.236-1.745l-2.075-5.533 5.414-1.104-.976 1.868c2.999 2.418 4.116 5.645 4.532 8.132-1.736-2.913-3.826-4.478-5.885-5.321l-1.01 1.958zm-7.895 10.781l1.985 5.566-5.43 1.016 1.006-1.852c-2.96-2.465-4.021-5.654-4.397-8.148 1.689 2.94 3.749 4.483 5.794 5.36l1.042-1.942zm10.795-6.029\" />\r\n    </svg>\r\n  )\r\n});\r\n\r\nconst LeftMenu = ({ menus, memuContext }: LeftMenuProps) => {\r\n  const { language, setLanguage } = useContext(LangContext);\r\n  const { socket } = useSocket();\r\n  const { classUuid, lectureId } = useParams();\r\n  const navigate = useNavigate();\r\n\r\n  return (\r\n    <Flex w=\"190px\" h=\"100vh\" flexDir=\"column\">\r\n      <Flex overflowX=\"hidden\" overflowY=\"auto\" flexDir=\"column\">\r\n        <Box ml=\"2\">\r\n          <VStack\r\n            divider={<StackDivider borderColor=\"gray.200\" />}\r\n            spacing={0}\r\n            w=\"190px\"\r\n            align=\"stretch\"\r\n          >\r\n            {menus.map((menu: TabSegment) => (\r\n              <LeftMenuTab\r\n                tabTitle={menu.tabTitle}\r\n                tabContents={menu.tabContents}\r\n              />\r\n            ))}\r\n          </VStack>\r\n        </Box>\r\n      </Flex>\r\n      <Spacer />\r\n      <Flex p=\"10px 10px\" w=\"full\" backgroundColor=\"white\" flexDir=\"column\">\r\n        <Box bottom={0}>\r\n          <Popover>\r\n            <PopoverTrigger>\r\n              <IconButton\r\n                size=\"md\"\r\n                colorScheme=\"red\"\r\n                icon={<CloseIcon />}\r\n                aria-label=\"Quit\"\r\n                m={0.5}\r\n              />\r\n            </PopoverTrigger>\r\n            <PopoverContent w={180}>\r\n              <PopoverArrow />\r\n              <PopoverBody>\r\n                <Button\r\n                  colorScheme=\"red\"\r\n                  w={150}\r\n                  onClick={() => {\r\n                    navigate(-1);\r\n                    if (memuContext === MenuContext.Lecture) {\r\n                      socket?.emit('ExitLecture', {\r\n                        classUuid,\r\n                        lectureId: parseInt(lectureId!, 10)\r\n                      });\r\n                    }\r\n                  }}\r\n                >\r\n                  Quit\r\n                </Button>\r\n              </PopoverBody>\r\n            </PopoverContent>\r\n          </Popover>\r\n          <IconButton\r\n            size=\"md\"\r\n            icon={<SettingsIcon />}\r\n            aria-label=\"Settings\"\r\n            m={0.5}\r\n          />\r\n          <Popover placement=\"top-start\">\r\n            {({ onClose }) => (\r\n              <>\r\n                <PopoverTrigger>\r\n                  <IconButton\r\n                    size=\"sm\"\r\n                    icon={<GlobeIcon />}\r\n                    aria-label=\"Settings\"\r\n                    m={0.5}\r\n                  />\r\n                </PopoverTrigger>\r\n                <Portal>\r\n                  <PopoverContent w=\"165px\" h=\"60px\">\r\n                    <PopoverBody>\r\n                      <Button\r\n                        colorScheme=\"green\"\r\n                        marginRight=\"2px\"\r\n                        onClick={() => {\r\n                          setLanguage(LanguageType.EN);\r\n                          onClose();\r\n                        }}\r\n                      >\r\n                        EN\r\n                      </Button>\r\n                      <Button\r\n                        colorScheme=\"blue\"\r\n                        onClick={() => {\r\n                          setLanguage(LanguageType.KO);\r\n                          onClose();\r\n                        }}\r\n                      >\r\n                        한글\r\n                      </Button>\r\n                      <PopoverCloseButton />\r\n                    </PopoverBody>\r\n                  </PopoverContent>\r\n                </Portal>\r\n              </>\r\n            )}\r\n          </Popover>\r\n        </Box>\r\n      </Flex>\r\n    </Flex>\r\n  );\r\n};\r\n\r\nexport default LeftMenu;\r\n","import { NoticeTabEntry } from '../types';\r\n\r\nconst deafultEntries: NoticeTabEntry[] = [];\r\n\r\nexport default deafultEntries;\r\n","import React, { useEffect, useContext } from 'react';\r\nimport { Flex, Text, Button } from '@chakra-ui/react';\r\nimport { useParams } from 'react-router';\r\nimport { useSocket } from '../context/socket';\r\n\r\n// import useClasses from '../hooks/useClasses';\r\n// import UserContext from '../context/user/userContext';\r\n\r\nconst FloatConnectionStatus = () => {\r\n  const { connected } = useSocket();\r\n  return (\r\n    <Flex\r\n      position=\"fixed\"\r\n      left={5}\r\n      bottom={10}\r\n      zIndex={3}\r\n      w=\"300px\"\r\n      h=\"200px\"\r\n      backgroundColor=\"gray.300\"\r\n      justifyContent=\"center\"\r\n      alignContent=\"center\"\r\n      borderRadius=\"30px\"\r\n      opacity=\"0.8\"\r\n      color={connected ? 'blue.500' : 'red.500'}\r\n    >\r\n      <Text height=\"fit-content\" fontSize=\"2xl\">{`Connected: ${\r\n        connected ? 'True' : 'False'\r\n      }`}</Text>\r\n    </Flex>\r\n  );\r\n};\r\n\r\nexport default FloatConnectionStatus;\r\n","import React from 'react';\r\nimport { createIcon } from '@chakra-ui/react';\r\n\r\nexport const FlagIcon = createIcon({\r\n  displayName: 'flagIcon',\r\n  path: (\r\n    <svg\r\n      className=\"flagIcon\"\r\n      version=\"1.1\"\r\n      id=\"Capa_1\"\r\n      xmlns=\"http://www.w3.org/2000/svg\"\r\n      x=\"0px\"\r\n      y=\"0px\"\r\n      viewBox=\"0 0 206.505 206.505\"\r\n      xmlSpace=\"preserve\"\r\n    >\r\n      <g>\r\n        <path\r\n          d=\"M167.069,16.354c-0.426,0.186-43.29,18.671-70.274-4.481c-31.021-26.619-60.722-0.2-61.012,0.072\r\n          L34.623,13l-0.179,193.494l7.108,0.011l0.115-122.594c5.157-4.091,27.11-19.086,50.498,0.988\r\n          c30.356,26.047,75.839,6.438,77.765,5.59l2.133-0.938V14.153L167.069,16.354z M164.943,84.824\r\n          c-8.997,3.389-44.603,14.874-68.148-5.322c-10.375-8.904-20.6-11.871-29.629-11.871c-10.815,0-19.923,4.266-25.489,7.702\r\n          l0.047-59.101c5.264-4.169,27.142-18.961,50.44,1.034c24.855,21.323,59.863,12.043,72.78,7.516V84.824z\"\r\n        />\r\n      </g>\r\n    </svg>\r\n  )\r\n});\r\n","import React from 'react';\r\nimport { Button, Box } from '@chakra-ui/react';\r\nimport { CopyIcon } from '@chakra-ui/icons';\r\nimport { MarkerType } from '../../types';\r\nimport { FlagIcon } from './Icon';\r\n\r\ninterface ButtonProps {\r\n  onClick: (arg?: any | void) => void;\r\n}\r\n\r\nconst ClipboardButton = ({\r\n  children,\r\n  onClick\r\n}: React.PropsWithChildren<ButtonProps>) => (\r\n  <Button\r\n    className=\"ClipboardButton\"\r\n    leftIcon={<CopyIcon />}\r\n    aria-label=\"Settings\"\r\n    m={0.5}\r\n    onClick={onClick}\r\n  >\r\n    {children}\r\n  </Button>\r\n);\r\n\r\nconst FlagButton = ({\r\n  children,\r\n  onClick\r\n}: React.PropsWithChildren<ButtonProps>) => (\r\n  <Button\r\n    className=\"flagButton\"\r\n    leftIcon={<FlagIcon />}\r\n    aria-label=\"Settings\"\r\n    m={0.5}\r\n    onClick={onClick}\r\n  >\r\n    {children}\r\n  </Button>\r\n);\r\n\r\nconst CreateMarkerButtons: React.FC<ButtonProps> = ({ onClick }) => (\r\n  <Box className=\"create-timeline-marker\">\r\n    <Button\r\n      colorScheme=\"red\"\r\n      leftIcon={<FlagIcon />}\r\n      marginRight=\"2px\"\r\n      onClick={() => onClick(MarkerType.QUESTION)}\r\n    >\r\n      Question\r\n    </Button>\r\n    <Button\r\n      colorScheme=\"blue\"\r\n      leftIcon={<FlagIcon />}\r\n      onClick={() => onClick(MarkerType.DISCUSSION)}\r\n    >\r\n      Discussion\r\n    </Button>\r\n  </Box>\r\n);\r\n\r\nexport { FlagButton, ClipboardButton, CreateMarkerButtons };\r\n","import axios from 'axios';\r\n\r\nimport * as dotenv from 'dotenv';\r\n\r\ndotenv.config();\r\n\r\nconst MAX_NUM = 10;\r\n\r\nconst getPlayListItems = async (playlistID: string) => {\r\n  const result = await axios.get(\r\n    `https://www.googleapis.com/youtube/v3/playlistItems`,\r\n    {\r\n      params: {\r\n        part: 'id,snippet',\r\n        maxResults: MAX_NUM,\r\n        playlistId: playlistID,\r\n        key: process.env.REACT_APP_YOUTUBE_API_KEY\r\n      }\r\n    }\r\n  );\r\n  return result.data;\r\n};\r\n\r\nexport { getPlayListItems };\r\n","import React, { useState, useEffect } from 'react';\r\nimport { Link } from 'react-router-dom';\r\nimport {\r\n  Box,\r\n  Flex,\r\n  Spacer,\r\n  Text,\r\n  Button,\r\n  Image,\r\n  AspectRatio,\r\n  Heading,\r\n  useColorModeValue,\r\n  extendTheme\r\n} from '@chakra-ui/react';\r\nimport { createBreakpoints } from '@chakra-ui/theme-tools';\r\nimport { getPlayListItems } from '../common/playlist';\r\n\r\nconst breakpoints = createBreakpoints({\r\n  sm: '320px',\r\n  md: '768px',\r\n  lg: '960px',\r\n  xl: '1200px',\r\n  '2xl': '1536px'\r\n});\r\nconst theme = extendTheme({ breakpoints });\r\n\r\nconst LectureCard = ({\r\n  lectureNum,\r\n  youtubePlayList,\r\n  isLive,\r\n  date,\r\n  to,\r\n  key,\r\n  lectureName\r\n}: any) => {\r\n  const [thumbnailUrl, setThumbnailUrl] = useState('');\r\n\r\n  useEffect(() => {\r\n    getPlayListItems(youtubePlayList).then(v => {\r\n      setThumbnailUrl(v.items[0].snippet.thumbnails.standard.url);\r\n    });\r\n  }, []);\r\n\r\n  return (\r\n    <Box\r\n      w=\"100%\"\r\n      h=\"60vh\"\r\n      rounded=\"md\"\r\n      boxShadow=\"md\"\r\n      bgColor={isLive ? 'red.200' : 'white'}\r\n      borderColor={isLive ? 'red' : 'black'}\r\n      overflow=\"hidden\"\r\n    >\r\n      <Flex h=\"100%\" flexDirection=\"column\">\r\n        <AspectRatio ratio={16 / 9}>\r\n          <Image src={thumbnailUrl} fit=\"cover\" h=\"40%\" />\r\n        </AspectRatio>\r\n        <Flex\r\n          h=\"100%\"\r\n          flexDirection=\"column\"\r\n          textAlign=\"center\"\r\n          p={6}\r\n          color={useColorModeValue('gray.800', 'white')}\r\n          align=\"center\"\r\n        >\r\n          {isLive ? (\r\n            <Text\r\n              fontSize=\"lg\"\r\n              fontWeight=\"bold\"\r\n              bg=\"red.100\"\r\n              p={2}\r\n              px={3}\r\n              color=\"red\"\r\n              rounded=\"full\"\r\n            >\r\n              Live\r\n            </Text>\r\n          ) : (\r\n            <Text\r\n              fontSize=\"lg\"\r\n              fontWeight=\"bold\"\r\n              bg=\"green.100\"\r\n              p={2}\r\n              px={3}\r\n              color=\"green.500\"\r\n              rounded=\"full\"\r\n            >\r\n              {`${date}`}\r\n            </Text>\r\n          )}\r\n          <Spacer />\r\n          <Box>\r\n            <Heading\r\n              color={useColorModeValue('gray.700', 'white')}\r\n              fontSize={{\r\n                base: '12px',\r\n                md: '20px',\r\n                lg: '26px',\r\n                xl: '30px',\r\n                '2xl': '42px'\r\n              }}\r\n              fontFamily=\"body\"\r\n            >\r\n              {lectureName}\r\n            </Heading>\r\n          </Box>\r\n          <Spacer />\r\n          <Link to={to} key={key}>\r\n            <Button\r\n              w=\"100%\"\r\n              h=\"40px\"\r\n              bg=\"green.400\"\r\n              color=\"white\"\r\n              fontSize=\"15px\"\r\n              rounded=\"xl\"\r\n              boxShadow=\"0 5px 20px 0px rgb(72 187 120 / 43%)\"\r\n              _hover={{\r\n                bg: 'green.500'\r\n              }}\r\n              _focus={{\r\n                bg: 'green.500'\r\n              }}\r\n            >\r\n              Go To Lecture\r\n            </Button>\r\n          </Link>\r\n          <Box h=\"30px\" />\r\n        </Flex>\r\n      </Flex>\r\n    </Box>\r\n  );\r\n};\r\n\r\nexport default LectureCard;\r\n","import React from 'react';\r\nimport { Swiper, SwiperSlide } from 'swiper/react';\r\nimport SwiperCore, {\r\n  Navigation,\r\n  Pagination,\r\n  Scrollbar,\r\n  A11y,\r\n  Mousewheel,\r\n  Keyboard\r\n} from 'swiper';\r\nimport 'swiper/swiper.scss';\r\nimport 'swiper/components/navigation/navigation.scss';\r\nimport 'swiper/components/pagination/pagination.scss';\r\nimport 'swiper/components/scrollbar/scrollbar.scss';\r\nimport './carousel.css';\r\n\r\nimport LectureCard from './lecturecard';\r\nimport { Lecture } from '../../types';\r\n\r\nSwiperCore.use([Navigation, Pagination, Scrollbar, A11y, Mousewheel, Keyboard]);\r\n\r\nconst LectureCarousel = ({ classUuid, memberType, lectureList }: any) => {\r\n  const pagination = {\r\n    clickable: true,\r\n    renderBullet: (index: any, className: any) => {\r\n      return `<span class=\"${className}\">${index + 1}</span>`;\r\n    }\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <Swiper\r\n        centeredSlides\r\n        className=\"swiper-container\"\r\n        spaceBetween={50}\r\n        slidesPerView={4}\r\n        navigation\r\n        mousewheel\r\n        keyboard\r\n        pagination={pagination}\r\n      >\r\n        {lectureList.map(\r\n          ({\r\n            id: lectureId,\r\n            lectureDate,\r\n            lectureName,\r\n            LiveStatus,\r\n            playlist\r\n          }: Lecture) => (\r\n            <SwiperSlide>\r\n              <LectureCard\r\n                lectureNum={lectureId}\r\n                youtubePlayList={playlist}\r\n                date={lectureDate.slice(0, 10)}\r\n                to={`/class/${classUuid}/${memberType}/${lectureId}`}\r\n                key={lectureId}\r\n                isLive={LiveStatus}\r\n                lectureName={lectureName}\r\n              />\r\n            </SwiperSlide>\r\n          )\r\n        )}\r\n      </Swiper>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default LectureCarousel;\r\n","import React, { useState, useEffect, useRef } from 'react';\r\nimport YouTube from 'react-youtube';\r\nimport '../style/youtube.css';\r\n\r\nimport { Progress } from '@chakra-ui/react';\r\nimport { CreateMarkerButtons } from './common/Button';\r\nimport { useSocket } from '../context/socket';\r\nimport TimeMarker from './timeMarker';\r\nimport { Marker, MarkerType, MemberType } from '../types';\r\n\r\ninterface userInfo {\r\n  memberType: MemberType;\r\n  classUuid: string;\r\n  lectureId: number;\r\n  videoId: string;\r\n  videoIndex: number;\r\n  width?: number | string; // 100px or '65%'\r\n  height?: number | string;\r\n}\r\n\r\nenum VideoState {\r\n  UNSTARTED = -1,\r\n  ENDED,\r\n  PLAYING,\r\n  PAUSED,\r\n  BUFFERING,\r\n  CUED = 5\r\n}\r\n\r\nconst YouTubePlayer = ({\r\n  memberType,\r\n  classUuid,\r\n  lectureId,\r\n  videoId,\r\n  videoIndex,\r\n  width = '100%',\r\n  height = '100%',\r\n  isControled\r\n}: userInfo & { isControled?: boolean }) => {\r\n  const { socket, connected } = useSocket();\r\n  const [video, setVideo] = useState<any>(null); // youtube player - Q. type?\r\n\r\n  const [videoCurrent, setVideoCurrent] = useState<number>(0); // current running time of the video\r\n  const videoDuration = useRef<number>(0); // total video length\r\n  const intervalID = useRef<NodeJS.Timeout | null>(null); // setInterval return value for tracking current running time\r\n\r\n  // DOM ref\r\n  const videoWrapper = useRef<HTMLDivElement>(null);\r\n  const videoTimelineWrapper = useRef<HTMLDivElement>(null);\r\n\r\n  const [markers, setMarkers] = useState<Marker[]>([]); // get real 'markerInfoArr' data by calling DB API\r\n\r\n  // Cover/uncover video - for ad time or buffering\r\n  const cover = () => videoWrapper.current?.classList.add('coverVideo');\r\n  const uncover = () => videoWrapper.current?.classList.remove('coverVideo');\r\n  /*\r\n  // Usage)\r\n  cover();\r\n  setTimeout(() => {\r\n    uncover();\r\n  }, 2000);\r\n  */\r\n\r\n  // Cover youtube component before any video is selected\r\n  if (videoId === 'NULL') cover();\r\n  else uncover();\r\n\r\n  // Initialize\r\n  const onReady = (evt: any) => {\r\n    setVideo(evt.target);\r\n  };\r\n\r\n  // Set socket listeners and join room\r\n  useEffect(() => {\r\n    // If not instructor, sync video time, play, and pause\r\n    if (connected && !!video) {\r\n      if (isControled) {\r\n        socket?.on('InstructorTimeChange', (newtime: number) => {\r\n          video?.seekTo(newtime);\r\n        });\r\n        socket?.on('InstructorPlay', () => {\r\n          video?.playVideo();\r\n        });\r\n        socket?.on('InstructorPause', () => {\r\n          video?.pauseVideo();\r\n        });\r\n      }\r\n\r\n      socket?.on('GetMarkers', ({ markers: responseMarkers, status }) => {\r\n        if (status === 200) {\r\n          setMarkers(responseMarkers);\r\n        }\r\n      });\r\n      socket?.emit('GetMarkers', { classUuid, lectureId, videoIndex });\r\n    }\r\n\r\n    socket?.on('CreateMarker', ({ marker, status }) => {\r\n      if (status === 200) {\r\n        setMarkers(markerArr => [...markerArr, marker]);\r\n      }\r\n    });\r\n\r\n    return () => {\r\n      clearInterval(intervalID.current as NodeJS.Timeout);\r\n      socket?.off('InstructorTimeChange');\r\n      socket?.off('InstructorPlay');\r\n      socket?.off('InstructorPause');\r\n      socket?.off('GetMarkers');\r\n      socket?.off('CreateMarker');\r\n    };\r\n  }, [connected, video, videoIndex]);\r\n\r\n  if (isControled) videoWrapper.current?.classList.add('live');\r\n  else videoWrapper.current?.classList.remove('live');\r\n\r\n  // (For progress bar time) Set new setInterval on play\r\n  const onPlay = (evt: any) => {\r\n    if (video) {\r\n      videoDuration.current = video.playerInfo.duration;\r\n    }\r\n\r\n    intervalID.current = setInterval(() => {\r\n      setVideoCurrent(video.getCurrentTime());\r\n    }, 100);\r\n  };\r\n  // (For progress bar time) Remove setInterval on pause\r\n  const onPause = (evt: any) => {\r\n    clearInterval(intervalID.current as NodeJS.Timeout);\r\n  };\r\n\r\n  // Take care of sync logic here\r\n  const onStateChange = (evt: any) => {\r\n    if (isControled) return;\r\n\r\n    const player = evt.target;\r\n\r\n    const JO = {\r\n      classUuid,\r\n      lectureId,\r\n      newtime: player.getCurrentTime()\r\n    };\r\n\r\n    // When instructor changes video time : (onStateChange evt) pause-buffer-play\r\n    // For now, detect 'buffer' as a cue of video time change\r\n    if (evt.data === VideoState.BUFFERING) {\r\n      socket?.emit('InstructorTimeChange', JO);\r\n    } else if (evt.data === VideoState.PLAYING) {\r\n      // In case of changing video time while paused - update time when resume playing\r\n      socket?.emit('InstructorTimeChange', JO);\r\n      socket?.emit('InstructorPlay', JO);\r\n    } else if (evt.data === VideoState.PAUSED) {\r\n      socket?.emit('InstructorPause', JO);\r\n    }\r\n  };\r\n\r\n  const createTimeMarker = (markerType: MarkerType) => {\r\n    // edge cases for time - outside [0, videoDuration]\r\n    let curTime = video.getCurrentTime();\r\n    curTime =\r\n      curTime > videoDuration.current ? videoDuration.current - 5 : curTime;\r\n\r\n    const payload = {\r\n      classUuid,\r\n      lectureId,\r\n      marker: {\r\n        markerType,\r\n        time: (curTime / videoDuration.current) * 100, // location of marker to be placed on the video\r\n        videoIndex\r\n      }\r\n    };\r\n    socket?.emit('CreateMarker', payload);\r\n  };\r\n\r\n  // Options for 'react-youtube' library component\r\n  const options = {\r\n    height: height.toString(),\r\n    width: width.toString(),\r\n    playerVars: {\r\n      autoplay: 0 as const,\r\n      controls: isControled ? (0 as const) : (1 as const),\r\n      disablekb: isControled ? (1 as const) : (0 as const),\r\n      rel: 0 as const\r\n    }\r\n  };\r\n\r\n  // (Optional - default : black backgroun) Use to set background image for video cover\r\n  const imgURL =\r\n    'https://previews.123rf.com/images/sevenozz/sevenozz1812/sevenozz181200056/127054720-vintage-tv-test-screen-please-stand-by-television-calibration-pattern.jpg';\r\n  const coverStyles = {\r\n    backgroundImage: `url(${imgURL})`,\r\n    backgroundSize: '100% 100%'\r\n  };\r\n\r\n  videoTimelineWrapper.current?.classList.add('showTimeline');\r\n\r\n  return (\r\n    <div\r\n      className={memberType === MemberType.INSTRUCTOR ? 'teacher' : 'student'}\r\n      id=\"youtube-wrapper\"\r\n      ref={videoWrapper}\r\n      style={{\r\n        width,\r\n        height\r\n      }}\r\n      // onMouseEnter={() => {\r\n      //   videoTimelineWrapper.current?.classList.add('showTimeline');\r\n      // }}\r\n      // onMouseLeave={() => {\r\n      //   videoTimelineWrapper.current?.classList.remove('showTimeline');\r\n      // }}\r\n    >\r\n      <CreateMarkerButtons onClick={createTimeMarker} />\r\n      {/* 3 Overlay components on top of video player - timeline marker, create marker buttons, and progress bar */}\r\n      <div className=\"video-timeline-components\" ref={videoTimelineWrapper}>\r\n        {markers.map(({ id, markerType, time: location }) => {\r\n          if (videoDuration.current === 0) return <div />;\r\n\r\n          return (\r\n            <TimeMarker\r\n              id={id}\r\n              time={location}\r\n              markerType={markerType}\r\n              videoIndex={videoIndex}\r\n            />\r\n          );\r\n        })}\r\n        {isControled ? (\r\n          <Progress\r\n            colorScheme=\"red\"\r\n            position=\"absolute\"\r\n            bottom=\"35px\"\r\n            height=\"5px\"\r\n            width=\"100%\"\r\n            value={\r\n              videoDuration.current\r\n                ? (videoCurrent / videoDuration.current) * 100\r\n                : 0\r\n            }\r\n          />\r\n        ) : (\r\n          <div /> /* Empty */\r\n        )}\r\n      </div>\r\n      <div className=\"video-cover\" style={coverStyles} />\r\n      <div className=\"video-container\">\r\n        <YouTube\r\n          className=\"video\"\r\n          videoId={videoId}\r\n          opts={options}\r\n          onReady={onReady}\r\n          onPlay={onPlay}\r\n          onPause={onPause}\r\n          onStateChange={onStateChange}\r\n        />\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\nexport default YouTubePlayer;\r\n","import React, { useState, useEffect } from 'react';\r\nimport { Box, Flex, Button, useClipboard, useToast } from '@chakra-ui/react';\r\nimport { useParams } from 'react-router';\r\nimport { Link } from 'react-router-dom';\r\nimport LeftMenu from '../components/leftmenu/leftmenu';\r\nimport defaultNoticeTabEntries from '../data/leftmenuData';\r\nimport Chat from '../components/chat';\r\nimport FloatConnectionStatus from '../components/floatConnectionStatus';\r\nimport {\r\n  Lecture,\r\n  Member,\r\n  MemberType,\r\n  MenuContext,\r\n  TabSegment,\r\n  TabType,\r\n  UserTabEntry\r\n} from '../types';\r\nimport { useSocket } from '../context/socket';\r\nimport { ClipboardButton } from '../components/common/Button';\r\n// 🐛 나중에 lecture grid로 대체\r\nimport LectureCarousel from '../components/lecturecarousel/lecturecarousel';\r\n\r\nconst ClassPage = () => {\r\n  const { classUuid, memberType } = useParams();\r\n  const { socket, connected } = useSocket();\r\n  const [lectureList, setLectureList] = useState<Lecture[]>([]);\r\n\r\n  const { hasCopied, onCopy } = useClipboard(classUuid!);\r\n  const toast = useToast();\r\n\r\n  const memberTypeEntry = {\r\n    tabName:\r\n      memberType === MemberType.INSTRUCTOR ? 'Instructor 👨‍🏫' : 'Student 👨‍🎓',\r\n    type: TabType.NOTICE,\r\n    message: 'Member Type'\r\n  };\r\n\r\n  const noticeTabSegment: TabSegment = {\r\n    tabTitle: 'Classroom',\r\n    tabContents: [...defaultNoticeTabEntries, memberTypeEntry]\r\n  };\r\n\r\n  const [memberArr, setMemberArr] = useState<UserTabEntry[]>([]);\r\n  const memberTabSegment: TabSegment = {\r\n    tabTitle: 'Classmates',\r\n    tabContents: memberArr\r\n  };\r\n\r\n  useEffect(() => {\r\n    const payload = { classUuid };\r\n\r\n    // Initialize\r\n    socket?.on('JoinClass', ({ instructor }) => {\r\n      socket?.emit('GetClassMembers', payload);\r\n      socket?.emit('GetLectures', payload);\r\n    });\r\n    socket?.emit('JoinClass', payload);\r\n\r\n    // Whenever new lecture is created - update lecture list\r\n    socket?.on('CreateLecture', response => {\r\n      const { lecture, status } = response;\r\n      if (status === 200) {\r\n        // socket?.emit('GetLectures', payload);\r\n        setLectureList(lecList => [...lecList, lecture]);\r\n      }\r\n    });\r\n\r\n    // get all members and lectures in the classroom\r\n    socket?.on('GetClassMembers', response => {\r\n      const { members, status } = response;\r\n      if (status === 200) {\r\n        // Formulate tabEntries for members\r\n        const newMemList = members.map(\r\n          (mem: Member): UserTabEntry => ({\r\n            tabName: mem.userName,\r\n            type: TabType.USER,\r\n            userId: mem.id\r\n          })\r\n        );\r\n        setMemberArr(newMemList);\r\n      }\r\n    });\r\n    socket?.on('GetLectures', response => {\r\n      const { lectures, status } = response;\r\n      if (status === 200) {\r\n        setLectureList(lectures);\r\n      }\r\n    });\r\n  }, [connected]);\r\n\r\n  const clickClipboard = () => {\r\n    onCopy();\r\n    toast({\r\n      title: 'ClassId copied to your clipboard!',\r\n      status: 'success',\r\n      duration: 1500,\r\n      isClosable: true\r\n    });\r\n  };\r\n  return (\r\n    <>\r\n      <FloatConnectionStatus />\r\n      <Flex>\r\n        <LeftMenu\r\n          menus={[noticeTabSegment, memberTabSegment]}\r\n          memuContext={MenuContext.Class}\r\n        />\r\n        <Box w=\"8px\" h=\"100vh\" />\r\n        <Box w=\"100%\" h=\"100vh\" bgColor=\"gray.100\">\r\n          <LectureCarousel\r\n            classUuid={classUuid}\r\n            memberType={memberType}\r\n            lectureList={lectureList}\r\n          />\r\n          {memberType === 'instructor' && (\r\n            <Link to={`/class/${classUuid}/${memberType}/createLecture`}>\r\n              <Button>Create new lecture</Button>\r\n            </Link>\r\n          )}\r\n          <ClipboardButton onClick={clickClipboard}>\r\n            Copy Class Id\r\n          </ClipboardButton>\r\n        </Box>\r\n        {/* <Chat classUuid={classUuid!} hasHeader /> */}\r\n      </Flex>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default ClassPage;\r\n","import React from 'react';\r\nimport { useSocket } from '../context/socket';\r\nimport { Marker, MarkerType } from '../types';\r\n\r\ninterface FlagProps {\r\n  color: string;\r\n}\r\n\r\nconst FlagSVG: React.FC<FlagProps> = ({ color }) => {\r\n  return (\r\n    <svg\r\n      width=\"26\"\r\n      height=\"42\"\r\n      viewBox=\"0 0 26 42\"\r\n      fill=\"none\"\r\n      xmlns=\"http://www.w3.org/2000/svg\"\r\n    >\r\n      <path\r\n        id=\"FlagSVGStroke\"\r\n        d=\"M0.25 41.75V1.35983C0.478428 0.930839 0.673497 0.640584 0.845353 0.461995C1.02353 0.276835 1.14455 0.243676 1.22836 0.250958C1.32482 0.259338 1.46095 0.327377 1.65137 0.532983C1.82818 0.723902 2.02343 1.00219 2.25 1.36856V41.75H0.25Z\"\r\n        fill={color}\r\n        stroke=\"black\"\r\n        strokeWidth=\"0.5\"\r\n      />\r\n      <path\r\n        id=\"FlagSVGStroke\"\r\n        d=\"M0.25 20.8038V3.86704C5.79233 6.03311 9.95189 6.92656 13.8517 6.82338C17.6706 6.72233 21.2189 5.66585 25.5464 3.95051C24.221 7.25607 23.5865 9.87565 23.6068 12.4474C23.6276 15.0852 24.3371 17.6498 25.6573 20.8285C20.9883 21.9986 17.2644 22.6277 13.4138 22.6521C9.53251 22.6767 5.51003 22.087 0.25 20.8038Z\"\r\n        fill={color}\r\n        stroke=\"black\"\r\n        strokeWidth=\"0.5\"\r\n      />\r\n    </svg>\r\n  );\r\n};\r\n\r\nconst TimeMarker = ({\r\n  id,\r\n  time,\r\n  markerType,\r\n  videoIndex\r\n}: Omit<Marker, 'messages'>) => {\r\n  const { socket } = useSocket();\r\n\r\n  // Click handler - Send click event through Socket, to Chat component\r\n  const onClickEvt = () => {\r\n    const payload = { markerId: id, markerType };\r\n\r\n    // send 'markerId' of clicked marker to Chat component\r\n    socket?.emit('TimeMarkerClicked', payload);\r\n  };\r\n\r\n  const colorPick = (markerT: MarkerType) => {\r\n    switch (markerT) {\r\n      case MarkerType.DISCUSSION:\r\n        return 'blue';\r\n      case MarkerType.QUESTION:\r\n        return 'red';\r\n      default:\r\n        throw new Error('Invalid MarkerType');\r\n    }\r\n  };\r\n\r\n  return (\r\n    <button\r\n      className=\"timeline-marker\"\r\n      style={{\r\n        left: `${time}%` /* ratio of current time to video duration */\r\n      }}\r\n      type=\"button\"\r\n      aria-label=\"timeline\"\r\n      onClick={() => onClickEvt()}\r\n    >\r\n      <FlagSVG color={colorPick(markerType)} />\r\n    </button>\r\n  );\r\n};\r\n\r\nexport default TimeMarker;\r\n","import React, { useState, useEffect, useRef, useContext } from 'react';\r\nimport { CloseButton, Flex } from '@chakra-ui/react';\r\nimport axios from 'axios';\r\n\r\nimport ChatMessage from './chatMessage';\r\nimport ChatInput from './chatInput';\r\nimport Header from './common/Header';\r\n\r\nimport { LanguageType, MarkerType, TextMessageResponse } from '../types';\r\n\r\nimport { useSocket } from '../context/socket';\r\nimport useMe from '../hooks/useMe';\r\nimport langContext from '../context/language/languageContext';\r\n\r\nenum ChatMode {\r\n  Marker = 'Marker',\r\n  Live = 'Live',\r\n  Individual = 'Individual'\r\n}\r\n\r\ntype ChatStatus =\r\n  | {\r\n      chatMode: ChatMode.Live;\r\n    }\r\n  | { chatMode: ChatMode.Marker; markerType: MarkerType }\r\n  | { chatMode: ChatMode.Individual; peer: { id: number; name: string } };\r\n\r\ninterface ChatProps {\r\n  hasHeader: boolean;\r\n  classUuid: string;\r\n  lectureId: number;\r\n  customHeader?: string;\r\n}\r\n\r\n// 🚨 Possible duplicate with 'interface ChatMessageProps' in 'chatMessage.tsx'\r\ninterface Message {\r\n  messageId: number;\r\n  userName: string;\r\n  message: {\r\n    ko: {\r\n      result: string;\r\n      status: number;\r\n    };\r\n    en: {\r\n      result: string;\r\n      status: number;\r\n    };\r\n  };\r\n  time: string;\r\n  isMy: boolean;\r\n}\r\n\r\nconst Chat = ({\r\n  hasHeader,\r\n  classUuid,\r\n  lectureId,\r\n  customHeader = ''\r\n}: ChatProps) => {\r\n  const { socket, connected } = useSocket();\r\n  const [messages, setMessages] = useState<Message[]>([]);\r\n  const chatStatus = useRef<ChatStatus>({\r\n    chatMode: ChatMode.Live\r\n  });\r\n  const currentMarkerId = useRef<number>(-1);\r\n  const { id: myId } = useMe();\r\n\r\n  // Set Chat header title\r\n  const pickHeader = (chatStat: ChatStatus) => {\r\n    switch (chatStat.chatMode) {\r\n      case ChatMode.Live:\r\n        return 'Live Chat';\r\n      case ChatMode.Marker:\r\n        return chatStat.markerType === MarkerType.QUESTION\r\n          ? 'Question'\r\n          : 'Discussion';\r\n      case ChatMode.Individual:\r\n        return chatStat.peer.name;\r\n      default:\r\n        throw new Error('Invalid ChatStatus');\r\n    }\r\n  };\r\n  const header = pickHeader(chatStatus.current);\r\n  const { language } = useContext(langContext);\r\n\r\n  // @args {MarkerTextMessageEntity} message - message response from the server\r\n  const createNewMessageObj = (messageResponse: any): Message => {\r\n    const {\r\n      dateStr,\r\n      senderId,\r\n      senderName,\r\n      text,\r\n      messageId\r\n    }: TextMessageResponse = messageResponse;\r\n    const dateObj = new Date(dateStr);\r\n    const messageObj: Message = {\r\n      messageId, // Live chat doesn't have messageId\r\n      userName: senderName,\r\n      message: text,\r\n      time: `${dateObj.getHours()}:${dateObj.getMinutes()}`,\r\n      isMy: senderId === myId\r\n    };\r\n    return messageObj;\r\n  };\r\n\r\n  // Socket listeners\r\n  useEffect(() => {\r\n    // TimeMarker Click event - fetch discussion messages\r\n    socket?.on(\r\n      'TimeMarkerClicked',\r\n      (markerId: number, markerType: MarkerType) => {\r\n        currentMarkerId.current = markerId;\r\n        chatStatus.current = { chatMode: ChatMode.Marker, markerType };\r\n        socket?.emit('GetMarkerMessages', { markerId });\r\n      }\r\n    );\r\n\r\n    // Retrieve saved marker messages\r\n    socket?.on('GetMarkerMessages', ({ textMessages, status }) => {\r\n      setMessages(arr => []); // clear\r\n\r\n      const retrievedMessages: Message[] = textMessages.map(\r\n        (messageResponse: any) => createNewMessageObj(messageResponse)\r\n      );\r\n      setMessages(arr => [...arr, ...retrievedMessages]);\r\n    });\r\n\r\n    // Live chat event - get live chat message\r\n    socket?.on('LiveChatTextMessage', ({ message, status }) => {\r\n      if (status === 200 && chatStatus.current.chatMode === ChatMode.Live) {\r\n        setMessages(arr => [...arr, createNewMessageObj(message)]);\r\n      }\r\n    });\r\n\r\n    // Marker chat event - get marker chat message\r\n    socket?.on('MarkerTextMessage', ({ markerId, savedMessage, status }) => {\r\n      if (\r\n        status === 200 &&\r\n        chatStatus.current.chatMode === ChatMode.Marker &&\r\n        currentMarkerId.current === markerId\r\n      ) {\r\n        setMessages(arr => [...arr, createNewMessageObj(savedMessage)]);\r\n      }\r\n    });\r\n  }, [connected]);\r\n\r\n  // Click 'X' close button in the header\r\n  // 1) chatMode.current == discussion mode : change to Live mode; fetch Live chat messages\r\n  // 2) chatMode.current == Live chatting : clear chat\r\n  const backToLiveChat = () => {\r\n    chatStatus.current = { chatMode: ChatMode.Live };\r\n    setMessages([]); // 🐛 (API?) Fetch Live chat message\r\n  };\r\n\r\n  const createMessage = (text: string) => {\r\n    if (text.trim().length === 0) return; // ignore empty string\r\n\r\n    // Create and send message\r\n    switch (chatStatus.current.chatMode) {\r\n      case ChatMode.Live:\r\n        socket?.emit('LiveChatTextMessage', {\r\n          classUuid,\r\n          lectureId,\r\n          text\r\n        });\r\n        break;\r\n      case ChatMode.Marker:\r\n        socket?.emit('MarkerTextMessage', {\r\n          classUuid,\r\n          lectureId,\r\n          markerTextMessage: {\r\n            markerId: currentMarkerId.current,\r\n            message: text\r\n          }\r\n        });\r\n        break;\r\n      case ChatMode.Individual:\r\n        break;\r\n      default:\r\n        throw new Error('Invalid ChatStatus');\r\n    }\r\n  };\r\n\r\n  const colorPick = () => {\r\n    switch (chatStatus.current.chatMode) {\r\n      case ChatMode.Live:\r\n        return 'gray.50';\r\n      case ChatMode.Marker:\r\n        return chatStatus.current.markerType === MarkerType.QUESTION\r\n          ? '#FF4A3E'\r\n          : '#3D9AFC';\r\n      case ChatMode.Individual:\r\n        return '#298977';\r\n      default:\r\n        throw new Error('Invalid MarkerType');\r\n    }\r\n  };\r\n\r\n  return (\r\n    <Flex\r\n      w=\"auto\"\r\n      h=\"100vh\"\r\n      backgroundColor=\"gray.50\"\r\n      flexDir=\"column\"\r\n      align=\"center\"\r\n    >\r\n      {hasHeader && (\r\n        <Header\r\n          backgroundColor={colorPick()}\r\n          color=\"black\"\r\n          headingSize=\"md\"\r\n          headingText={header}\r\n          p=\"5px 15px\"\r\n        >\r\n          {chatStatus.current.chatMode !== ChatMode.Live && (\r\n            <CloseButton marginLeft=\"auto\" size=\"md\" onClick={backToLiveChat} />\r\n          )}\r\n        </Header>\r\n      )}\r\n      <Flex w=\"280px\" overflowY=\"auto\" pb={3} pt={3} flexDir=\"column\" h=\"full\">\r\n        {messages.map(({ userName, message, time, messageId, isMy }) => (\r\n          <ChatMessage\r\n            key={messageId}\r\n            userName={userName}\r\n            message={\r\n              language === LanguageType.KO\r\n                ? message.ko.result\r\n                : message.en.result\r\n            }\r\n            time={time}\r\n            isMy={isMy}\r\n          />\r\n        ))}\r\n      </Flex>\r\n      <ChatInput sendMessage={(msg: string) => createMessage(msg)} />\r\n    </Flex>\r\n  );\r\n};\r\n\r\nexport default Chat;\r\n","import React from 'react';\r\nimport { Box, Flex } from '@chakra-ui/react';\r\nimport { generateKeyPair } from 'crypto';\r\n\r\ninterface ChatMessageProps {\r\n  userName: string;\r\n  message: string;\r\n  time: string;\r\n  isMy: boolean;\r\n}\r\n\r\ninterface MessageProps {\r\n  message: string;\r\n  backgroundColor: string;\r\n  color: string;\r\n}\r\n\r\nconst Message = ({ message, backgroundColor, color }: MessageProps) => {\r\n  return (\r\n    <Box\r\n      maxWidth=\"200px\"\r\n      backgroundColor={backgroundColor}\r\n      color={color}\r\n      marginBottom=\"auto\"\r\n      borderRadius=\"7px\"\r\n      fontSize=\"14px\"\r\n      p=\"5px 7px\"\r\n    >\r\n      {message}\r\n    </Box>\r\n  );\r\n};\r\n\r\nconst Time = ({ time }: { time: string }) => {\r\n  return (\r\n    <Box fontSize={5} marginTop=\"auto\" p={1} color=\"black\">\r\n      {time}\r\n    </Box>\r\n  );\r\n};\r\n\r\nconst Username = ({ userName }: { userName: string }) => {\r\n  return (\r\n    <Box\r\n      width=\"fit-content\"\r\n      mt={0}\r\n      mb={0.5}\r\n      fontSize=\"14px\"\r\n      p=\"2px 5px\"\r\n      textAlign=\"start\"\r\n    >\r\n      {userName}\r\n    </Box>\r\n  );\r\n};\r\n\r\nconst ChatMessage = ({ userName, message, time, isMy }: ChatMessageProps) => {\r\n  return (\r\n    <Box width=\"full\" p=\"4px 8px 0px\" m={0}>\r\n      {!isMy && <Username userName={userName} />}\r\n      <Flex\r\n        display=\"flex\"\r\n        justifyContent={isMy ? 'right' : 'left'}\r\n        alignContent=\"center\"\r\n        m={0}\r\n      >\r\n        {isMy ? (\r\n          <>\r\n            <Time time={time} />\r\n            <Message\r\n              message={message}\r\n              backgroundColor=\"blue.500\"\r\n              color=\"gray.50\"\r\n            />\r\n          </>\r\n        ) : (\r\n          <>\r\n            <Message\r\n              message={message}\r\n              backgroundColor=\"gray.100\"\r\n              color=\"black\"\r\n            />\r\n            <Time time={time} />\r\n          </>\r\n        )}\r\n      </Flex>\r\n    </Box>\r\n  );\r\n};\r\n\r\nexport default ChatMessage;\r\n","import React from 'react';\r\nimport { createIcon, Icon } from '@chakra-ui/react';\r\n\r\nconst RecordIcon = createIcon({\r\n  displayName: 'RecordIcon',\r\n  path: (\r\n    <svg\r\n    //   //   enable-background=\"new 0 0 141.732 141.732\"\r\n    //   height=\"141.732px\"\r\n    //   id=\"Livello_1\"\r\n    //   version=\"1.1\"\r\n    //   viewBox=\"0 0 141.732 141.732\"\r\n    //   width=\"141.732px\"\r\n    //   //   xml:space=\"preserve\"\r\n    //   xmlns=\"http://www.w3.org/2000/svg\"\r\n    //   //   xmlns:xlink=\"http://www.w3.org/1999/xlink\"\r\n    >\r\n      <g id=\"Livello_7\">\r\n        <path d=\"M91.192,59.623V21.946c0.043-0.534,0.068-1.073,0.068-1.618C91.262,9.102,82.161,0,70.935,0   c-11.229,0-20.33,9.104-20.33,20.328c0,0.545,0.024,1.084,0.066,1.618v37.677c-0.042,0.535-0.066,1.073-0.066,1.621   c0,11.229,9.103,20.326,20.329,20.326c11.227,0,20.327-9.1,20.327-20.326C91.262,60.696,91.235,60.158,91.192,59.623    M120.942,50.219c0-3.084-2.5-5.584-5.584-5.584c-3.082,0-5.582,2.5-5.582,5.584c0,0.047,0.004,0.092,0.008,0.139   c-0.076,21.43-17.471,38.779-38.917,38.779c-21.448,0-38.842-17.353-38.917-38.779c0.002-0.047,0.008-0.092,0.008-0.139   c0-3.084-2.5-5.584-5.584-5.584s-5.585,2.5-5.585,5.584c0,25.714,19.388,46.896,44.339,49.743v28.648H38.78   c-2.96,0-5.358,2.402-5.358,5.361c0,2.961,2.398,5.355,5.358,5.355h26.35h11.61h26.35c2.959,0,5.357-2.396,5.357-5.355   c0-2.959-2.398-5.361-5.357-5.361h-26.35V99.945C101.628,97.039,120.942,75.885,120.942,50.219\" />\r\n      </g>\r\n      <g id=\"Livello_1_1_\" />\r\n    </svg>\r\n  )\r\n});\r\n\r\nconst FlagIcon = createIcon({\r\n  displayName: 'flagIcon',\r\n  path: (\r\n    <svg\r\n      version=\"1.1\"\r\n      id=\"Capa_1\"\r\n      xmlns=\"http://www.w3.org/2000/svg\"\r\n      x=\"0px\"\r\n      y=\"0px\"\r\n      viewBox=\"0 0 206.505 206.505\"\r\n      xmlSpace=\"preserve\"\r\n    >\r\n      <g>\r\n        <path\r\n          d=\"M167.069,16.354c-0.426,0.186-43.29,18.671-70.274-4.481c-31.021-26.619-60.722-0.2-61.012,0.072\r\n\t\tL34.623,13l-0.179,193.494l7.108,0.011l0.115-122.594c5.157-4.091,27.11-19.086,50.498,0.988\r\n\t\tc30.356,26.047,75.839,6.438,77.765,5.59l2.133-0.938V14.153L167.069,16.354z M164.943,84.824\r\n\t\tc-8.997,3.389-44.603,14.874-68.148-5.322c-10.375-8.904-20.6-11.871-29.629-11.871c-10.815,0-19.923,4.266-25.489,7.702\r\n\t\tl0.047-59.101c5.264-4.169,27.142-18.961,50.44,1.034c24.855,21.323,59.863,12.043,72.78,7.516V84.824z\"\r\n        />\r\n      </g>\r\n    </svg>\r\n  )\r\n});\r\n\r\nconst CircleIcon = (props: any) => (\r\n  <Icon viewBox=\"0 0 200 200\" {...props}>\r\n    <path\r\n      fill=\"currentColor\"\r\n      d=\"M 100, 100 m -75, 0 a 75,75 0 1,0 150,0 a 75,75 0 1,0 -150,0\"\r\n    />\r\n  </Icon>\r\n);\r\n\r\nexport { RecordIcon, FlagIcon, CircleIcon };\r\n","import { useParams } from 'react-router';\r\n\r\nconst useParsedClassLectureIds = () => {\r\n  const { classUuid, lectureId } = useParams();\r\n\r\n  if (!classUuid) {\r\n    throw new Error('No ClassUuid');\r\n  }\r\n\r\n  if (!lectureId) {\r\n    throw new Error('No Lecture Id');\r\n  }\r\n  const parsedLectureId = parseInt(lectureId, 10);\r\n  return { classUuid, lectureId: parsedLectureId };\r\n};\r\n\r\nexport default useParsedClassLectureIds;\r\n","import React, { useState, useCallback, useEffect, useRef } from 'react';\r\nimport { IconButton } from '@chakra-ui/react';\r\nimport { CircleIcon } from './common/icons';\r\nimport { useSocket } from '../context/socket';\r\nimport useParsedClassLectureIds from '../hooks/useParsedClassLectureId';\r\n\r\nconst AudioRecorder = () => {\r\n  const [audioStream, setAudioStream] = useState<MediaStream>();\r\n  const [media, setMedia] = useState<MediaRecorder>();\r\n  const [onRec, setOnRec] = useState(true);\r\n  const [source, setSource] = useState<MediaStreamAudioSourceNode>();\r\n  const [audioAnalyser, setAudioAnalyser] = useState<ScriptProcessorNode>();\r\n  const [audioUrl, setAudioUrl] = useState<Blob>();\r\n\r\n  const { socket, connected } = useSocket();\r\n\r\n  const { classUuid, lectureId } = useParsedClassLectureIds();\r\n\r\n  useEffect(() => {\r\n    if (connected && socket) {\r\n      socket.on(\r\n        'LiveChatAudioMessage',\r\n        ({\r\n          arrayBuffer,\r\n          senderId\r\n        }: {\r\n          arrayBuffer: ArrayBuffer;\r\n          senderId: number;\r\n        }) => {\r\n          const blob = new Blob([new Uint8Array(arrayBuffer)]);\r\n          const url = URL.createObjectURL(blob);\r\n          const audio = new Audio(url);\r\n          audio.play();\r\n        }\r\n      );\r\n    }\r\n  }, [connected]);\r\n\r\n  const onRecAudio = () => {\r\n    // 음원정보를 담은 노드를 생성하거나 음원을 실행또는 디코딩 시키는 일을 한다\r\n    const audioCtx = new window.AudioContext();\r\n    // 자바스크립트를 통해 음원의 진행상태에 직접접근에 사용된다.\r\n    const analyser = audioCtx.createScriptProcessor(0, 1, 1);\r\n    setAudioAnalyser(analyser);\r\n\r\n    const makeSound = (stream: MediaStream) => {\r\n      const src = audioCtx.createMediaStreamSource(stream);\r\n      setSource(src);\r\n      src.connect(analyser);\r\n      analyser.connect(audioCtx.destination);\r\n    };\r\n\r\n    navigator.mediaDevices.getUserMedia({ audio: true }).then(stream => {\r\n      const mediaRecorder = new MediaRecorder(stream);\r\n      mediaRecorder.start();\r\n      setAudioStream(stream);\r\n      setMedia(mediaRecorder);\r\n      makeSound(stream);\r\n\r\n      analyser.onaudioprocess = e => {\r\n        if (e.playbackTime > 180) {\r\n          stream.getAudioTracks().forEach(track => {\r\n            track.stop();\r\n          });\r\n          mediaRecorder.stop();\r\n\r\n          analyser.disconnect();\r\n          audioCtx.createMediaStreamSource(stream).disconnect();\r\n\r\n          mediaRecorder.ondataavailable = (blobEvent: BlobEvent) => {\r\n            setAudioUrl(blobEvent.data);\r\n            setOnRec(true);\r\n          };\r\n        } else {\r\n          setOnRec(false);\r\n        }\r\n      };\r\n    });\r\n  };\r\n\r\n  const offRecAudio = () => {\r\n    if (media) {\r\n      media.ondataavailable = e => {\r\n        setAudioUrl(e.data);\r\n        setOnRec(true);\r\n      };\r\n    }\r\n\r\n    if (audioStream) {\r\n      audioStream.getAudioTracks().forEach(track => {\r\n        track.stop();\r\n      });\r\n    }\r\n\r\n    if (media) media.stop();\r\n    if (audioAnalyser) audioAnalyser.disconnect();\r\n    if (source) source.disconnect();\r\n  };\r\n\r\n  const onSubmitAudioFile = useCallback(() => {\r\n    if (audioUrl) {\r\n      const sound = new File([audioUrl], 'soundBlob', {\r\n        lastModified: new Date().getTime(),\r\n        type: 'audio'\r\n      });\r\n      const payload = {\r\n        classUuid,\r\n        lectureId,\r\n        arrayBuffer: sound\r\n      };\r\n      socket?.emit('LiveChatAudioMessage', payload);\r\n    }\r\n  }, [audioUrl]);\r\n\r\n  useEffect(onSubmitAudioFile, [audioUrl]);\r\n\r\n  return (\r\n    <>\r\n      <IconButton\r\n        aria-label=\"Record Voice Chat\"\r\n        icon={<CircleIcon style={{ color: onRec ? 'black' : 'red' }} />}\r\n        onClick={onRec ? onRecAudio : offRecAudio}\r\n      />\r\n    </>\r\n  );\r\n};\r\n\r\nexport default AudioRecorder;\r\n","import React, { useState, useEffect } from 'react';\r\nimport { IconButton, Textarea, Flex } from '@chakra-ui/react';\r\nimport { ChatIcon } from '@chakra-ui/icons';\r\nimport AudioRecorder from './audioRecorder';\r\n\r\nconst ChatInput = ({ sendMessage }: any) => {\r\n  const [message, setMessage] = useState('');\r\n\r\n  // init - set keyboard keydown\r\n  useEffect(() => {\r\n    document.addEventListener('keydown', keydownEvents);\r\n    return () => document.removeEventListener('keydown', keydownEvents);\r\n  });\r\n\r\n  const keydownEvents = (evt: any) => {\r\n    if (!evt.shiftKey && (evt.code === 'Enter' || evt.code === 'NumpadEnter')) {\r\n      evt.preventDefault();\r\n      sendMessage(message);\r\n      setMessage(''); // clear message after send\r\n    }\r\n  };\r\n\r\n  return (\r\n    <Flex p=\"8px 6px\" w=\"full\" backgroundColor=\"white\" flexDir=\"column\">\r\n      <Textarea\r\n        placeholder=\"Enter Chat\"\r\n        fontSize=\"14px\"\r\n        rows={2}\r\n        m={0.5}\r\n        borderColor=\"black\"\r\n        p=\"5px 5px\"\r\n        resize=\"vertical\"\r\n        value={message}\r\n        onChange={evt => {\r\n          setMessage(evt.target.value);\r\n        }}\r\n      />\r\n      <Flex justifyContent=\"right\">\r\n        <AudioRecorder />\r\n        <IconButton\r\n          onClick={evt => {\r\n            sendMessage(message);\r\n            setMessage(''); // clear message after send\r\n          }}\r\n          size=\"md\"\r\n          icon={<ChatIcon />}\r\n          aria-label=\"Send Message\"\r\n          m={0.5}\r\n        />\r\n      </Flex>\r\n    </Flex>\r\n  );\r\n};\r\n\r\nexport default ChatInput;\r\n","import React from 'react';\r\nimport { Flex, Heading, Box } from '@chakra-ui/react';\r\n\r\ninterface HeaderProps {\r\n  backgroundColor: string;\r\n  color: string;\r\n  headingSize: string;\r\n  p: number | string;\r\n  headingText: string;\r\n}\r\n\r\nconst Header = ({\r\n  children,\r\n  backgroundColor,\r\n  color,\r\n  headingSize,\r\n  p,\r\n  headingText\r\n}: React.PropsWithChildren<HeaderProps>) => {\r\n  return (\r\n    <Flex\r\n      width=\"full\"\r\n      p={p}\r\n      backgroundColor={backgroundColor}\r\n      color={color}\r\n      justify=\"space-between\"\r\n    >\r\n      <Heading mt=\"3px\" size={headingSize}>\r\n        {headingText}\r\n      </Heading>\r\n      <Flex>{children}</Flex>\r\n    </Flex>\r\n  );\r\n};\r\n\r\nexport default Header;\r\n","import { useContext } from 'react';\r\nimport UserContext from '../context/user/userContext';\r\n\r\nconst useMe = () => {\r\n  const { status, userName, id } = useContext(UserContext);\r\n\r\n  return { status, userName, id };\r\n};\r\n\r\nexport default useMe;\r\n","import React from 'react';\r\nimport {\r\n  Modal,\r\n  ModalOverlay,\r\n  ModalBody,\r\n  ModalContent,\r\n  ModalCloseButton,\r\n  ModalHeader,\r\n  HStack\r\n} from '@chakra-ui/react';\r\n\r\nimport {\r\n  initContent,\r\n  createContent,\r\n  joinContent\r\n} from './classAddModalContents';\r\nimport { Class } from '../../types';\r\n\r\nexport enum ClassAddModalState {\r\n  INIT,\r\n  JOIN,\r\n  CREATE\r\n}\r\n\r\ninterface AddClassModalProps {\r\n  isOpen: boolean;\r\n  onClose: () => void;\r\n  addClass: (newClass: Class) => void;\r\n}\r\n\r\nconst AddClassModal = ({ isOpen, onClose, addClass }: AddClassModalProps) => {\r\n  const [modalState, setModalState] = React.useState(ClassAddModalState.INIT);\r\n  const [title, setTitle] = React.useState('');\r\n  const [subtitle, setSubtitle] = React.useState('');\r\n  const [joinClassUUID, setJoinUUID] = React.useState('');\r\n\r\n  const onChangejoinUUID = (e: any) => {\r\n    setJoinUUID(e.target.value);\r\n  };\r\n  const onChangeTitle = (e: any) => {\r\n    setTitle(e.target.value);\r\n  };\r\n  const onChangeSubtitle = (e: any) => {\r\n    setSubtitle(e.target.value);\r\n  };\r\n\r\n  const onModalClose = () => {\r\n    setTitle('');\r\n    setSubtitle('');\r\n    setJoinUUID('');\r\n    onClose();\r\n    setModalState(ClassAddModalState.INIT);\r\n  };\r\n\r\n  const handleJoin = () => {\r\n    fetch(\r\n      'http://ec2-13-209-17-49.ap-northeast-2.compute.amazonaws.com/api/lobby/class',\r\n      {\r\n        method: 'PATCH',\r\n        headers: { 'Content-Type': 'application/json' },\r\n        body: JSON.stringify({ uuid: joinClassUUID })\r\n      }\r\n    )\r\n      .then(r => r.json())\r\n      .then(j => {\r\n        if (j.status === 200) {\r\n          addClass(j.class);\r\n          onModalClose();\r\n        } else if (j.status === 400) {\r\n          throw new Error(j.err);\r\n        }\r\n      })\r\n      .catch(e => {\r\n        // TODO: 실패시 에러 핸들링\r\n        console.error(e);\r\n      });\r\n  };\r\n\r\n  const handleCreate = () => {\r\n    fetch(\r\n      'http://ec2-13-209-17-49.ap-northeast-2.compute.amazonaws.com/api/lobby/class',\r\n      {\r\n        method: 'POST',\r\n        headers: { 'Content-Type': 'application/json' },\r\n        body: JSON.stringify({ title, subtitle })\r\n      }\r\n    )\r\n      .then(r => r.json())\r\n      .then(j => {\r\n        if (j.status === 200) {\r\n          addClass(j.class);\r\n          onModalClose();\r\n        } else if (j.status === 400) {\r\n          throw new Error(j.err);\r\n        }\r\n      })\r\n      .catch(e => {\r\n        // TODO: 실패시 에러 핸들링\r\n        console.error(e);\r\n      });\r\n  };\r\n\r\n  return (\r\n    <Modal isOpen={isOpen} onClose={onModalClose} size=\"xl\">\r\n      <ModalOverlay />\r\n      <ModalContent height=\"500px\">\r\n        <ModalHeader textAlign=\"center\" fontSize=\"30px\" fontWeight=\"bold\">\r\n          New Class\r\n        </ModalHeader>\r\n        <ModalCloseButton />\r\n        <ModalBody pb={6} h=\"300px\">\r\n          <HStack justifyContent=\"center\" alignItems=\"center\" w=\"full\" h=\"full\">\r\n            {modalState === ClassAddModalState.INIT &&\r\n              initContent({ setModalState })}\r\n            {modalState === ClassAddModalState.JOIN &&\r\n              joinContent({ onChangejoinUUID, handleJoin, onModalClose })}\r\n            {modalState === ClassAddModalState.CREATE &&\r\n              createContent({\r\n                onChangeTitle,\r\n                onChangeSubtitle,\r\n                handleCreate,\r\n                onModalClose\r\n              })}\r\n          </HStack>\r\n        </ModalBody>\r\n      </ModalContent>\r\n    </Modal>\r\n  );\r\n};\r\nexport default AddClassModal;\r\n","import React, { useState, useEffect, useRef, useContext } from 'react';\r\nimport { Box, Flex } from '@chakra-ui/react';\r\nimport { useParams } from 'react-router';\r\nimport { type } from 'os';\r\nimport LeftMenu from '../components/leftmenu/leftmenu';\r\nimport defaultNoticeTabEntries from '../data/leftmenuData';\r\nimport YouTube from '../components/youtube';\r\nimport Chat from '../components/chat';\r\nimport FloatConnectionStatus from '../components/floatConnectionStatus';\r\nimport {\r\n  MemberType,\r\n  Lecture,\r\n  Member,\r\n  TabSegment,\r\n  TabType,\r\n  UserTabEntry,\r\n  VideoTabEntry,\r\n  NoticeTabEntry,\r\n  MenuContext\r\n} from '../types';\r\nimport { useSocket } from '../context/socket';\r\nimport { getPlayListItems } from '../components/common/playlist';\r\nimport LectureContext from '../context/lecture/lectureContext';\r\n\r\nconst LecturePage = () => {\r\n  const { classUuid, memberType, lectureId } = useParams();\r\n  const { socket, connected } = useSocket();\r\n  const [lecture, setLecture] = useState<Lecture>();\r\n  const { isLive, setIsLive, selectedVidIdx, setSelectedVidIdx } =\r\n    useContext(LectureContext);\r\n\r\n  const EMPTY_HANDLER = () => {\r\n    // Do nothing\r\n  };\r\n\r\n  const [videoArr, setVideoArr] = useState<VideoTabEntry[]>([]);\r\n  const videoTabSegment: TabSegment = {\r\n    tabTitle: 'Playlist',\r\n    tabContents: videoArr\r\n  };\r\n  const [memberArr, setMemberArr] = useState<UserTabEntry[]>([]);\r\n  const memberTabSegment: TabSegment = {\r\n    tabTitle: 'Participants',\r\n    tabContents: memberArr\r\n  };\r\n\r\n  const [noticeArr, setNoticeArr] = useState<NoticeTabEntry[]>(\r\n    defaultNoticeTabEntries\r\n  );\r\n  const noticeTabSegment: TabSegment = {\r\n    tabTitle: 'Lecture room',\r\n    tabContents: noticeArr\r\n  };\r\n\r\n  useEffect(() => {\r\n    if (memberType === MemberType.INSTRUCTOR) {\r\n      const payload = {\r\n        classUuid,\r\n        lectureId: parsedLectureId,\r\n        status: !isLive\r\n      };\r\n\r\n      const memberTypeEntry = {\r\n        tabName: 'Instructor 👨‍🏫',\r\n        type: TabType.NOTICE,\r\n        message: 'Member Type'\r\n      };\r\n\r\n      const toggleLiveButton: NoticeTabEntry = {\r\n        tabName: `${isLive ? '⚫ Stop' : '🔴 Start'} Live`,\r\n        type: TabType.NOTICE,\r\n        message: 'toggleLive',\r\n        onClickHandler: () => {\r\n          socket?.emit('SetLectureLiveStatus', payload);\r\n        }\r\n      };\r\n\r\n      setNoticeArr([\r\n        ...defaultNoticeTabEntries,\r\n        memberTypeEntry,\r\n        toggleLiveButton\r\n      ]);\r\n    } else {\r\n      const notifyLiveButton: NoticeTabEntry = {\r\n        tabName: isLive ? '🔴 On-Live' : '⚫ Off-Live',\r\n        type: TabType.NOTICE,\r\n        message: 'notifyLive',\r\n        onClickHandler: EMPTY_HANDLER\r\n      };\r\n      const memberTypeEntry = {\r\n        tabName: 'Student 👨‍🎓',\r\n        type: TabType.NOTICE,\r\n        message: 'Member Type'\r\n      };\r\n      setNoticeArr([\r\n        ...defaultNoticeTabEntries,\r\n        memberTypeEntry,\r\n        notifyLiveButton\r\n      ]);\r\n    }\r\n  }, [isLive]);\r\n\r\n  const parsedLectureId = parseInt(lectureId!, 10);\r\n\r\n  useEffect(() => {\r\n    if (!lecture) return;\r\n\r\n    const videoList: VideoTabEntry[] = [];\r\n    getPlayListItems(lecture.playlist).then(data => {\r\n      data.items.forEach((element: any, idx: number) => {\r\n        videoList.push({\r\n          tabName: element.snippet.title,\r\n          type: TabType.VIDEO,\r\n          videoIdx: idx,\r\n          link: element.snippet.resourceId.videoId,\r\n          onClickHandler: () => {\r\n            // only the instructor gets to choose video on LIVE\r\n            socket?.emit('SelectVideo', {\r\n              classUuid,\r\n              lectureId: parsedLectureId,\r\n              selectedVideoIdx: idx\r\n            });\r\n          }\r\n        });\r\n      });\r\n\r\n      setVideoArr(videoList);\r\n    });\r\n  }, [lecture]);\r\n\r\n  // Get videos in the playlist & participants in the lecture\r\n  useEffect(() => {\r\n    socket?.on('JoinLecture', ({ user, lecture: lec, status }) => {\r\n      if (status === 200) {\r\n        setLecture(lec);\r\n\r\n        const newUser: UserTabEntry = {\r\n          tabName: user.userName,\r\n          type: TabType.USER,\r\n          userId: user.id\r\n        };\r\n\r\n        setMemberArr(arr => [...arr, newUser]);\r\n        const payload = { classUuid, lectureId: parsedLectureId };\r\n        setIsLive(lec.LiveStatus);\r\n        if (lec.LiveStatus) {\r\n          setSelectedVidIdx(lec.videoIdx);\r\n        }\r\n        socket?.emit('GetActiveLectureMember', payload);\r\n      }\r\n    });\r\n    const payload = { classUuid, lectureId: parsedLectureId };\r\n    socket?.emit('JoinLecture', payload);\r\n\r\n    // get members participating in the lecture\r\n    socket?.on('GetActiveLectureMember', response => {\r\n      const { members, status } = response;\r\n      if (status === 200) {\r\n        const newMemList = members.map(\r\n          (mem: Member): UserTabEntry => ({\r\n            tabName: mem.userName,\r\n            type: TabType.USER,\r\n            userId: mem.id\r\n          })\r\n        );\r\n        setMemberArr(newMemList);\r\n      }\r\n    });\r\n\r\n    // lecture live status change\r\n    socket?.on('SetLectureLiveStatus', response => {\r\n      const { liveStatus, status } = response;\r\n      if (status === 200) {\r\n        setIsLive(liveStatus);\r\n      }\r\n    });\r\n\r\n    // instructor selected video among playlist\r\n    socket?.on('SelectVideo', response => {\r\n      const { selectedVideoIdx, status } = response;\r\n      if (status === 200) {\r\n        setSelectedVidIdx(selectedVideoIdx);\r\n      }\r\n    });\r\n  }, [connected]);\r\n\r\n  // TODO - Take care of playlist\r\n  // 1. Get lecture list and construct 'menus' for leftmenu\r\n  // 2. Use lectureDate and lectureName somehow?\r\n\r\n  return (\r\n    <>\r\n      {/* <FloatConnectionStatus /> */}\r\n      <Flex>\r\n        <LeftMenu\r\n          menus={[noticeTabSegment, videoTabSegment, memberTabSegment]}\r\n          memuContext={MenuContext.Lecture}\r\n        />\r\n        <Box w=\"8px\" h=\"100vh\" />\r\n        <Box w=\"100%\" h=\"100vh\">\r\n          <YouTube\r\n            memberType={(memberType ?? MemberType.STUDENT) as MemberType}\r\n            classUuid={classUuid ?? 'uuid error'}\r\n            lectureId={parsedLectureId}\r\n            videoIndex={selectedVidIdx}\r\n            videoId={\r\n              videoArr.length > 0 ? videoArr[selectedVidIdx].link : 'NULL'\r\n            }\r\n            width=\"100%\"\r\n            height=\"100%\"\r\n            isControled={memberType === MemberType.STUDENT && isLive}\r\n          />\r\n        </Box>\r\n        <Chat classUuid={classUuid!} lectureId={parsedLectureId} hasHeader />\r\n      </Flex>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default LecturePage;\r\n","import React from 'react';\r\n\r\nimport {\r\n  Input,\r\n  InputGroup,\r\n  Stack,\r\n  Button,\r\n  FormControl,\r\n  FormLabel\r\n} from '@chakra-ui/react';\r\nimport { AddIcon, CalendarIcon } from '@chakra-ui/icons';\r\nimport { ClassAddModalState } from './classAddModal';\r\n\r\ninterface initContentProps {\r\n  setModalState: (modalState: ClassAddModalState) => void;\r\n}\r\n\r\nconst initContent = ({ setModalState }: initContentProps) => {\r\n  return (\r\n    <>\r\n      <Button\r\n        w={200}\r\n        h={200}\r\n        onClick={() => {\r\n          setModalState(ClassAddModalState.JOIN);\r\n        }}\r\n      >\r\n        <CalendarIcon w={10} h={10} />\r\n        <br />\r\n        Join\r\n      </Button>\r\n      <Button\r\n        w={200}\r\n        h={200}\r\n        onClick={() => {\r\n          setModalState(ClassAddModalState.CREATE);\r\n        }}\r\n      >\r\n        <AddIcon w={10} h={10} />\r\n        <br />\r\n        Create\r\n      </Button>\r\n    </>\r\n  );\r\n};\r\n\r\nconst joinContent = ({ onChangejoinUUID, handleJoin, onModalClose }: any) => {\r\n  return (\r\n    <Stack>\r\n      <FormControl>\r\n        <FormLabel>Join ID</FormLabel>\r\n        <InputGroup size=\"lg\">\r\n          <Input\r\n            type=\"text\"\r\n            placeholder=\"Class ID\"\r\n            onChange={onChangejoinUUID}\r\n          />\r\n        </InputGroup>\r\n      </FormControl>\r\n      <Button onClick={handleJoin} colorScheme=\"blue\" mr={3}>\r\n        Join\r\n      </Button>\r\n      <Button onClick={onModalClose}>Cancel</Button>\r\n    </Stack>\r\n  );\r\n};\r\n\r\nconst createContent = ({\r\n  onChangeTitle,\r\n  onChangeSubtitle,\r\n  handleCreate,\r\n  onModalClose\r\n}: any) => {\r\n  console.log(onChangeSubtitle);\r\n  return (\r\n    <Stack>\r\n      <FormControl>\r\n        <FormLabel>Class Title</FormLabel>\r\n        <InputGroup size=\"lg\">\r\n          <Input\r\n            type=\"text\"\r\n            placeholder=\"Class name\"\r\n            onChange={onChangeTitle}\r\n          />\r\n        </InputGroup>\r\n      </FormControl>\r\n      <FormControl>\r\n        <FormLabel>Class Subtitle</FormLabel>\r\n        <InputGroup>\r\n          <Input\r\n            type=\"text\"\r\n            placeholder=\"Class Subtitle\"\r\n            onChange={onChangeSubtitle}\r\n          />\r\n        </InputGroup>\r\n      </FormControl>\r\n      <Button onClick={handleCreate} colorScheme=\"blue\" mr={3}>\r\n        Save\r\n      </Button>\r\n      <Button onClick={onModalClose}>Cancel</Button>\r\n    </Stack>\r\n  );\r\n};\r\n\r\nexport { initContent, joinContent, createContent };\r\n","import React from 'react';\r\nimport { SimpleGrid, Grid } from '@chakra-ui/react';\r\n\r\ninterface LobbyContentProps {\r\n  col: string | undefined;\r\n}\r\n\r\nconst LobbyContent = ({\r\n  col,\r\n  children\r\n}: React.PropsWithChildren<LobbyContentProps>) => {\r\n  return (\r\n    <>\r\n      <SimpleGrid\r\n        gridTemplateRows=\"repeat(auto-fit, auto)\"\r\n        gridTemplateColumns=\"repeat(auto-fit, 270px)\"\r\n        spacing={8}\r\n        p={5}\r\n      >\r\n        {children}\r\n      </SimpleGrid>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default LobbyContent;\r\n","import React from 'react';\r\nimport { Box, Image, Flex } from '@chakra-ui/react';\r\nimport stc from 'string-to-color';\r\n\r\ninterface ClassCardProps {\r\n  imgSrc?: string;\r\n  title: string;\r\n  subTitle: string;\r\n  color: string;\r\n  backgroundColor: string;\r\n}\r\n\r\nconst ClassCard = ({\r\n  imgSrc,\r\n  title,\r\n  subTitle,\r\n  color,\r\n  backgroundColor\r\n}: ClassCardProps) => {\r\n  const classColor = stc({ title });\r\n  const regexColor = /^#?([a-f\\d]{2})([a-f\\d]{2})([a-f\\d]{2})$/i.exec(\r\n    classColor\r\n  );\r\n  const r = regexColor ? parseInt(regexColor[1], 16) : 0;\r\n  const g = regexColor ? parseInt(regexColor[2], 16) : 0;\r\n  const b = regexColor ? parseInt(regexColor[3], 16) : 0;\r\n  const isDark = r + g + b < 127 * 3;\r\n\r\n  return (\r\n    <Box\r\n      w=\"270px\"\r\n      h={150}\r\n      overflow=\"hidden\"\r\n      position=\"relative\"\r\n      borderRadius=\"30px\"\r\n      color={isDark ? 'white' : 'black'}\r\n      _hover={{ cursor: 'pointer', boxShadow: '0 0 3px rgba(0,0,0,1)' }}\r\n    >\r\n      <Flex\r\n        p={4}\r\n        w=\"full\"\r\n        h=\"100%\"\r\n        position=\"absolute\"\r\n        bottom={0}\r\n        backgroundColor={classColor}\r\n        direction=\"column\"\r\n      >\r\n        <Box\r\n          pl=\"5px\"\r\n          fontSize={40}\r\n          fontWeight=\"bold\"\r\n          display=\"inline\"\r\n          marginTop=\"auto\"\r\n        >\r\n          {`${title}   `}\r\n        </Box>\r\n        <Box pl=\"5px\" fontSize={20} fontWeight=\"bold\" display=\"inline\">\r\n          {`${subTitle}`}\r\n        </Box>\r\n      </Flex>\r\n    </Box>\r\n  );\r\n};\r\n\r\nexport default ClassCard;\r\n","import { useState, useEffect } from 'react';\r\nimport { Class, UserLoadStatus } from '../types';\r\nimport useMe from './useMe';\r\n\r\nconst useClasses = () => {\r\n  const [classes, setClasses] = useState<Class[]>([]);\r\n  const { status } = useMe();\r\n\r\n  useEffect(() => {\r\n    if (status === UserLoadStatus.LOADED) {\r\n      fetch(\r\n        'http://ec2-13-209-17-49.ap-northeast-2.compute.amazonaws.com/api/lobby/classes',\r\n        {\r\n          method: 'GET'\r\n        }\r\n      )\r\n        .then(r => r.json())\r\n        .then(j => {\r\n          setClasses(j.classes);\r\n        })\r\n        .catch(e => console.error(e));\r\n    }\r\n  }, [status]);\r\n\r\n  const addClass = (newClass: Class) => {\r\n    setClasses(classArr => [...classArr, newClass]);\r\n  };\r\n\r\n  return { classes, addClass };\r\n};\r\n\r\nexport default useClasses;\r\n","export default __webpack_public_path__ + \"static/media/logo2.7da65d47.svg\";","import React from 'react';\r\nimport {\r\n  Box,\r\n  IconButton,\r\n  useBreakpointValue,\r\n  Stack,\r\n  Heading,\r\n  Text,\r\n  Container\r\n} from '@chakra-ui/react';\r\nimport { ArrowLeftIcon, ArrowRightIcon } from '@chakra-ui/icons';\r\nimport Slider from 'react-slick';\r\nimport 'slick-carousel/slick/slick.css';\r\nimport 'slick-carousel/slick/slick-theme.css';\r\n\r\nconst settings = {\r\n  dots: true,\r\n  arrows: false,\r\n  fade: true,\r\n  infinite: true,\r\n  autoplay: true,\r\n  speed: 500,\r\n  autoplaySpeed: 5000,\r\n  slidesToShow: 1,\r\n  slidesToScroll: 1\r\n};\r\n\r\nconst LobbyBanner = () => {\r\n  const [slider, setSlider] = React.useState<Slider | null>(null);\r\n  const top = useBreakpointValue({ base: '90%', md: '50%' });\r\n  const side = useBreakpointValue({ base: '30%', md: '40px' });\r\n  const cards = [\r\n    {\r\n      title: 'LiveClass',\r\n      text: 'Be Live, Whenever, Wherever.',\r\n      image:\r\n        'https://images.unsplash.com/photo-1516796181074-bf453fbfa3e6?ixlib=rb-1.2.1&ixid=MnwxMjA3fDB8MHxwaG90by1yZWxhdGVkfDV8fHxlbnwwfHx8fA%3D%3D&auto=format&fit=crop&w=900&q=60'\r\n    },\r\n    {\r\n      title: 'LiveClass',\r\n      text: 'Be Live, Whenever, Wherever.',\r\n      image:\r\n        'https://images.unsplash.com/photo-1438183972690-6d4658e3290e?ixid=MnwxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8&ixlib=rb-1.2.1&auto=format&fit=crop&w=2274&q=80'\r\n    },\r\n    {\r\n      title: 'LiveClass',\r\n      text: 'Be Live, Whenever, Wherever.',\r\n      image:\r\n        'https://images.unsplash.com/photo-1507237998874-b4d52d1dd655?ixlib=rb-1.2.1&ixid=MnwxMjA3fDB8MHxwaG90by1yZWxhdGVkfDR8fHxlbnwwfHx8fA%3D%3D&auto=format&fit=crop&w=900&q=60'\r\n    }\r\n  ];\r\n\r\n  return (\r\n    <Box position=\"relative\" height=\"500px\" width=\"full\" overflow=\"hidden\">\r\n      <IconButton\r\n        aria-label=\"left-arrow\"\r\n        variant=\"ghost\"\r\n        position=\"absolute\"\r\n        left={side}\r\n        top={top}\r\n        transform=\"translate(0%, -50%)\"\r\n        zIndex={2}\r\n        onClick={() => slider?.slickPrev()}\r\n      >\r\n        <ArrowLeftIcon size=\"40px\" />\r\n      </IconButton>\r\n      <IconButton\r\n        aria-label=\"right-arrow\"\r\n        variant=\"ghost\"\r\n        position=\"absolute\"\r\n        right={side}\r\n        top={top}\r\n        transform=\"translate(0%, -50%)\"\r\n        zIndex={2}\r\n        onClick={() => slider?.slickNext()}\r\n      >\r\n        <ArrowRightIcon size=\"40px\" />\r\n      </IconButton>\r\n      <Slider {...settings} ref={(slider_: any) => setSlider(slider_)}>\r\n        {cards.map((card, index) => (\r\n          <Box\r\n            height=\"6xl\"\r\n            position=\"relative\"\r\n            backgroundPosition=\"center\"\r\n            backgroundRepeat=\"no-repeat\"\r\n            backgroundSize=\"cover\"\r\n            backgroundImage={`url(${card.image})`}\r\n          >\r\n            <Container size=\"container.lg\" height=\"500px\" position=\"relative\">\r\n              <Stack\r\n                spacing={6}\r\n                w=\"full\"\r\n                maxW=\"lg\"\r\n                position=\"absolute\"\r\n                top=\"50%\"\r\n                transform=\"translate(0, -50%)\"\r\n              >\r\n                <Heading fontSize={{ base: '3xl', md: '4xl', lg: '5xl' }}>\r\n                  {card.title}\r\n                </Heading>\r\n                <Text fontSize={{ base: 'md', lg: 'lg' }} color=\"GrayText\">\r\n                  {card.text}\r\n                </Text>\r\n              </Stack>\r\n            </Container>\r\n          </Box>\r\n        ))}\r\n      </Slider>\r\n    </Box>\r\n  );\r\n};\r\n\r\nexport default LobbyBanner;\r\n","import React from 'react';\r\nimport {\r\n  Box,\r\n  IconButton,\r\n  useDisclosure,\r\n  Heading,\r\n  Image\r\n} from '@chakra-ui/react';\r\nimport { useBreakpointValue } from '@chakra-ui/media-query';\r\nimport { AddIcon } from '@chakra-ui/icons';\r\nimport { Link } from 'react-router-dom';\r\n\r\nimport AddClassModal from '../components/lobbyPage/classAddModal';\r\nimport LobbyContent from '../components/lobbyPage/lobbyContent';\r\nimport ClassCard from '../components/lobbyPage/classCard';\r\nimport useClasses from '../hooks/useClasses';\r\nimport { MemberType } from '../types';\r\nimport LogoAsset from '../assets/logo2.svg';\r\nimport LobbyBanner from '../components/lobbyPage/banner';\r\n\r\nconst LobbyPage = () => {\r\n  const col = useBreakpointValue({\r\n    base: '4',\r\n    sm: '1',\r\n    md: '2',\r\n    lg: '3',\r\n    xl: '4',\r\n    '2xl': '5'\r\n  });\r\n  const { isOpen, onOpen, onClose } = useDisclosure();\r\n\r\n  const { classes, addClass } = useClasses();\r\n\r\n  return (\r\n    <>\r\n      <Box h=\"80px\" w=\"100%\" bgColor=\"black\">\r\n        <Image src={LogoAsset} alt=\"liveclass\" h=\"80px\" pl=\"8px\" />\r\n      </Box>\r\n      <LobbyBanner />\r\n      <br />\r\n      <Heading size=\"lg\" pl=\"30px\">\r\n        Teaching Lectures\r\n      </Heading>\r\n      <LobbyContent col={col}>\r\n        {classes\r\n          .filter(({ memberType }) => memberType === MemberType.INSTRUCTOR)\r\n          .map(({ uuid, title, subtitle, memberType }) => (\r\n            <Link to={`/class/${uuid}/${memberType}`} key={uuid}>\r\n              <ClassCard\r\n                title={title}\r\n                subTitle={subtitle}\r\n                color=\"white\"\r\n                backgroundColor=\"black\"\r\n              />\r\n            </Link>\r\n          ))}\r\n      </LobbyContent>\r\n\r\n      <br />\r\n\r\n      <Heading size=\"lg\" pl=\"30px\">\r\n        Listening Lectures\r\n      </Heading>\r\n      <LobbyContent col={col}>\r\n        {classes\r\n          .filter(({ memberType }) => memberType === MemberType.STUDENT)\r\n          .map(({ uuid, title, subtitle, memberType }) => (\r\n            <Link to={`/class/${uuid}/${memberType}`} key={uuid}>\r\n              <ClassCard\r\n                imgSrc=\"a\"\r\n                title={title}\r\n                subTitle={subtitle}\r\n                color=\"white\"\r\n                backgroundColor=\"black\"\r\n              />\r\n            </Link>\r\n          ))}\r\n      </LobbyContent>\r\n      <IconButton\r\n        position=\"fixed\"\r\n        right=\"5%\"\r\n        bottom=\"10%\"\r\n        size=\"lg\"\r\n        aria-label=\"Add Classroom\"\r\n        colorScheme=\"green\"\r\n        icon={<AddIcon />}\r\n        onClick={onOpen}\r\n      />\r\n      <AddClassModal onClose={onClose} isOpen={isOpen} addClass={addClass} />\r\n    </>\r\n  );\r\n};\r\n\r\nexport default LobbyPage;\r\n","import React from 'react';\r\nimport { Heading, Input, FormControl, Stack } from '@chakra-ui/react';\r\n\r\n// interface changeEventHandlerProps {\r\n//   handler: (event: React.ChangeEventHandler<HTMLInputElement>) => void;\r\n// }\r\n\r\nconst LectureTitle = ({ onChangeLecturetitle }: any) => {\r\n  return (\r\n    <Stack spacing=\"24px\">\r\n      <Heading size=\"lg\" pl=\"30px\">\r\n        Lecture Title\r\n      </Heading>\r\n      <FormControl pl=\"30px\">\r\n        <Input\r\n          type=\"text\"\r\n          placeholder=\"Lecture Title\"\r\n          onChange={evt => onChangeLecturetitle(evt)}\r\n          w=\"500px\"\r\n          focusBorderColor=\"black\"\r\n        />\r\n      </FormControl>\r\n    </Stack>\r\n  );\r\n};\r\n\r\nexport default LectureTitle;\r\n","import React from 'react';\r\nimport { Heading, FormControl, Stack, Textarea } from '@chakra-ui/react';\r\n\r\nconst LectureNotice = ({ onChangeLectureNotice }: any) => {\r\n  return (\r\n    <Stack spacing=\"24px\">\r\n      <Heading size=\"md\" pl=\"30px\">\r\n        Notice\r\n      </Heading>\r\n      <FormControl pl=\"30px\">\r\n        <Textarea\r\n          placeholder=\"Description\"\r\n          onChange={evt => onChangeLectureNotice(evt)}\r\n          focusBorderColor=\"black\"\r\n          w=\"500px\"\r\n        />\r\n      </FormControl>\r\n    </Stack>\r\n  );\r\n};\r\n\r\nexport default LectureNotice;\r\n","import React, { useState } from 'react';\r\nimport { Heading, Input, FormLabel, Stack, HStack } from '@chakra-ui/react';\r\n\r\nimport DatePicker from 'react-datepicker';\r\nimport 'react-datepicker/dist/react-datepicker.css';\r\n\r\ninterface classTimeInput {\r\n  lectureDate: Date;\r\n  setLectureDate: (date: Date) => void;\r\n}\r\n\r\nconst LectureTime = ({ lectureDate, setLectureDate }: classTimeInput) => {\r\n  return (\r\n    <Stack spacing=\"24px\">\r\n      <Heading size=\"md\" pl=\"30px\">\r\n        Lecture Time\r\n      </Heading>\r\n      <HStack pl=\"30px\">\r\n        <DatePicker\r\n          selected={lectureDate}\r\n          onChange={(date: Date) => setLectureDate(date)}\r\n          showTimeSelect\r\n          timeFormat=\"HH:mm\"\r\n          timeIntervals={15}\r\n          timeCaption=\"time\"\r\n          dateFormat=\"yyyy.MM.dd h:mm aa\"\r\n        />\r\n      </HStack>\r\n      {/* {lectureDate} */}\r\n    </Stack>\r\n  );\r\n};\r\n\r\nexport default LectureTime;\r\n","import React from 'react';\r\nimport { Heading, Text, Stack, HStack, Input, Button } from '@chakra-ui/react';\r\n\r\nimport { getPlayListItems } from '../../common/playlist';\r\n\r\nconst AddPlayList = ({\r\n  onChangeLecturePlaylist,\r\n  Lecturelink,\r\n  setLecturequizlist\r\n}: any) => {\r\n  const Youtubelist = [\r\n    {\r\n      id: 1,\r\n      link: '',\r\n      title: '',\r\n      quiztime: '',\r\n      problem: '',\r\n      answer: ''\r\n    }\r\n  ];\r\n\r\n  const onClickAdd = () => {\r\n    getPlayListItems(Lecturelink).then(data => {\r\n      data.items.forEach((element: any, idx: number) => {\r\n        const newquiz = {\r\n          id: idx,\r\n          link: element.snippet.resourceId.videoId,\r\n          title: element.snippet.title,\r\n          quiztime: ' ',\r\n          problem: ' ',\r\n          answer: ' ',\r\n          mark: 0\r\n        };\r\n        Youtubelist.push(newquiz);\r\n      });\r\n      setLecturequizlist(Youtubelist);\r\n    });\r\n  };\r\n\r\n  const onClickRemove = () => {\r\n    setLecturequizlist([\r\n      {\r\n        id: 1,\r\n        link: ' ',\r\n        quiztime: ' ',\r\n        problem: ' ',\r\n        answer: ' '\r\n      }\r\n    ]);\r\n  };\r\n  return (\r\n    <Stack spacing=\"24px\">\r\n      <Heading size=\"md\" pl=\"30px\">\r\n        Youtube playlist\r\n      </Heading>\r\n      <Text fontSize=\"sm\" pl=\"30px\">\r\n        Input Youtube playlist.\r\n        <br />\r\n        For\r\n        https://www.youtube.com/playlist?list=PLFt2h1jjxKxwQAQr6Dv5kYP4Uu5cGX1iH\r\n        <br />\r\n        Just input PLFt2h1jjxKxwQAQr6Dv5kYP4Uu5cGX1iH\r\n      </Text>\r\n      <HStack spacing=\"5px\" pl=\"30px\">\r\n        <Input\r\n          placeholder=\"Youtube Material link\"\r\n          onChange={evt => onChangeLecturePlaylist(evt)}\r\n          focusBorderColor=\"black\"\r\n          w=\"500px\"\r\n        />\r\n        <Button colorScheme=\"blue\" w={100} onClick={onClickAdd}>\r\n          Add\r\n        </Button>\r\n        <Button colorScheme=\"red\" w={100} onClick={onClickRemove}>\r\n          Remove All\r\n        </Button>\r\n      </HStack>\r\n    </Stack>\r\n  );\r\n};\r\nexport default AddPlayList;\r\n","import React from 'react';\r\nimport {\r\n  Stack,\r\n  IconButton,\r\n  Modal,\r\n  ModalOverlay,\r\n  ModalContent,\r\n  ModalHeader,\r\n  ModalFooter,\r\n  ModalBody,\r\n  ModalCloseButton,\r\n  Box,\r\n  Input,\r\n  Button,\r\n  FormLabel,\r\n  Textarea\r\n} from '@chakra-ui/react';\r\n\r\nimport { AddIcon } from '@chakra-ui/icons';\r\n\r\nconst AddQuizModal = ({\r\n  id,\r\n  isAddopen,\r\n  onAddopen,\r\n  onAddclose,\r\n  onChangeLectureproblem,\r\n  onChangeLectureanswer,\r\n  onChangeLecturequiztime,\r\n  Lectureproblem,\r\n  Lectureanswer,\r\n  Lecturequiztime,\r\n  setQurrentnumber,\r\n  Lecturequizlist,\r\n  Qurrentnumber,\r\n  setLecturequizlist\r\n}: any) => {\r\n  const onAddopenwithnum = (e: any) => {\r\n    setQurrentnumber(e.target.id);\r\n    onAddopen();\r\n  };\r\n  const addquiz = () => {\r\n    const tempquizlist = [...Lecturequizlist];\r\n    tempquizlist[Qurrentnumber - 1].quiztime = Lecturequiztime;\r\n    tempquizlist[Qurrentnumber - 1].problem = Lectureproblem;\r\n    tempquizlist[Qurrentnumber - 1].answer = Lectureanswer;\r\n    tempquizlist[Qurrentnumber - 1].mark = 1;\r\n    setLecturequizlist(tempquizlist);\r\n    onAddclose();\r\n  };\r\n  return (\r\n    <Stack>\r\n      <IconButton\r\n        id={id}\r\n        aria-label=\"Add to friends\"\r\n        icon={<AddIcon />}\r\n        onClick={onAddopenwithnum}\r\n      />\r\n      <Modal isOpen={isAddopen} onClose={onAddclose}>\r\n        <ModalOverlay />\r\n        <ModalContent>\r\n          <ModalHeader>Create Quiz</ModalHeader>\r\n          <ModalCloseButton />\r\n          <ModalBody>\r\n            <Stack spacing=\"20px\">\r\n              <Stack>\r\n                <Box>Problem Description</Box>\r\n                <Textarea\r\n                  placeholder=\"Description\"\r\n                  onChange={onChangeLectureproblem}\r\n                  focusBorderColor=\"black\"\r\n                />\r\n              </Stack>\r\n              <Stack>\r\n                <Box>Answer</Box>\r\n                <Input\r\n                  type=\"text\"\r\n                  placeholder=\"Problem Answer\"\r\n                  onChange={onChangeLectureanswer}\r\n                  focusBorderColor=\"black\"\r\n                />\r\n              </Stack>\r\n              <Stack>\r\n                <Box>Quiz Open Time</Box>\r\n                <FormLabel>If 07:34 please enter 0734</FormLabel>\r\n                <Input\r\n                  type=\"text\"\r\n                  placeholder=\"Quiz pop up time\"\r\n                  onChange={onChangeLecturequiztime}\r\n                  focusBorderColor=\"black\"\r\n                />\r\n              </Stack>\r\n            </Stack>\r\n          </ModalBody>\r\n          <ModalFooter>\r\n            <Button colorScheme=\"blue\" mr={3} onClick={addquiz}>\r\n              Add\r\n            </Button>\r\n          </ModalFooter>\r\n        </ModalContent>\r\n      </Modal>\r\n    </Stack>\r\n  );\r\n};\r\n\r\nexport default AddQuizModal;\r\n","import React, { useState } from 'react';\r\nimport {\r\n  IconButton,\r\n  useDisclosure,\r\n  Heading,\r\n  Button,\r\n  Table,\r\n  Thead,\r\n  Tbody,\r\n  Tr,\r\n  Th,\r\n  Center,\r\n  Stack,\r\n  Flex,\r\n  Spacer,\r\n  useToast\r\n} from '@chakra-ui/react';\r\nimport { DeleteIcon, CheckIcon, CloseIcon } from '@chakra-ui/icons';\r\n\r\nimport { useParams } from 'react-router';\r\nimport { useNavigate } from 'react-router-dom';\r\nimport LectureTitle from './createLecture/lectureTitle';\r\nimport LectureNotice from './createLecture/lectureNotice';\r\nimport LectureTime from './createLecture/lectureTime';\r\nimport AddPlayList from './createLecture/addPlaylist';\r\nimport AddQuizModal from './createLecture/addQuizModal';\r\n\r\nimport { useSocket } from '../../context/socket';\r\n\r\nconst AddLecturePage = () => {\r\n  const {\r\n    isOpen: isAddopen,\r\n    onOpen: onAddopen,\r\n    onClose: onAddclose\r\n  } = useDisclosure();\r\n\r\n  const [lectureDate, setLectureDate] = useState<Date>(new Date());\r\n\r\n  const [lectureTitle, setLectureTitle] = useState<string>('');\r\n  const [lectureNotice, setLectureNotice] = useState<string>('');\r\n  const [lecturePlaylist, setLecturePlaylist] = useState<string>('');\r\n\r\n  const [Lecturequiztime, setLecturequiztime] = useState('');\r\n  const [Lectureproblem, setLectureproblem] = useState('');\r\n  const [Lectureanswer, setLectureanswer] = useState('');\r\n  const [Qurrentnumber, setQurrentnumber] = useState('');\r\n  const [Lecturequizhead, setLecturequizhead] = useState([\r\n    {\r\n      id: 0,\r\n      playlist: lecturePlaylist,\r\n      link: 'Lecture Link',\r\n      title: 'Video Title',\r\n      quiztime: 'Lecture Quiz Time',\r\n      problem: 'Lecture Problem',\r\n      answer: 'Lecture Answer',\r\n      mark: 0\r\n    }\r\n  ]);\r\n  const [Lecturequizlist, setLecturequizlist] = useState([\r\n    {\r\n      id: 1,\r\n      playlist: lecturePlaylist,\r\n      link: ' ',\r\n      title: ' ',\r\n      quiztime: ' ',\r\n      problem: ' ',\r\n      answer: ' ',\r\n      mark: 0\r\n    }\r\n  ]);\r\n\r\n  const { socket, connected } = useSocket();\r\n  const { classUuid } = useParams();\r\n  const navigate = useNavigate(); // react-router-dom : go back to previous page\r\n  const toast = useToast();\r\n\r\n  const onChangeCreate = () => {\r\n    // setLecturequizlist(Lecturequizlist.filter((item: any) => item.mark !== 0));\r\n\r\n    const payload = {\r\n      classUuid,\r\n      lectureDate,\r\n      lectureName: lectureTitle,\r\n      playlist: lecturePlaylist\r\n    };\r\n    socket?.emit('CreateLecture', payload);\r\n    navigate(-1);\r\n\r\n    toast({\r\n      title: 'New lecture created',\r\n      status: 'success',\r\n      duration: 1500,\r\n      isClosable: true\r\n    });\r\n  };\r\n\r\n  const onChangeLectureTitle = (e: any) => {\r\n    setLectureTitle(e.target.value);\r\n  };\r\n  const onChangeLectureNotice = (e: any) => {\r\n    setLectureNotice(e.target.value);\r\n  };\r\n  const onChangeLectureproblem = (e: any) => {\r\n    setLectureproblem(e.target.value);\r\n  };\r\n  const onChangeLectureanswer = (e: any) => {\r\n    setLectureanswer(e.target.value);\r\n  };\r\n  const onChangeLecturequiztime = (e: any) => {\r\n    setLecturequiztime(e.target.value);\r\n  };\r\n  const onChangeLecturePlaylist = (e: any) => {\r\n    setLecturePlaylist(e.target.value);\r\n  };\r\n  const onClickRemove = (e: any) => {\r\n    removequiz(e.target.id);\r\n  };\r\n  const removequiz = (i: number) => {\r\n    const tempquizlist = [...Lecturequizlist];\r\n    tempquizlist[i - 1].quiztime = ' ';\r\n    tempquizlist[i - 1].problem = ' ';\r\n    tempquizlist[i - 1].answer = ' ';\r\n    tempquizlist[i - 1].mark = 0;\r\n    setLecturequizlist(tempquizlist);\r\n  };\r\n  const showQuiz = Lecturequizlist.map((item: any) => {\r\n    return (\r\n      <Table variant=\"simple\" size=\"sm\">\r\n        <Tbody>\r\n          <Tr align=\"left\">\r\n            <Th align=\"left\" width=\"5%\">\r\n              {item.id}\r\n            </Th>\r\n            <Th align=\"left\" width=\"15%\">\r\n              {item.title}\r\n            </Th>\r\n            <Th align=\"left\" width=\"10%\">\r\n              {item.quiztime}\r\n            </Th>\r\n            <Th align=\"left\" width=\"15%\">\r\n              {item.problem}\r\n            </Th>\r\n            <Th align=\"left\" width=\"5%\">\r\n              {item.answer}\r\n            </Th>\r\n            <Th align=\"center\" width=\"5%\">\r\n              <AddQuizModal\r\n                id={item.id}\r\n                isAddopen={isAddopen}\r\n                onAddopen={onAddopen}\r\n                onAddclose={onAddclose}\r\n                onChangeLectureproblem={onChangeLectureproblem}\r\n                onChangeLectureanswer={onChangeLectureanswer}\r\n                onChangeLecturequiztime={onChangeLecturequiztime}\r\n                Lectureproblem={Lectureproblem}\r\n                Lectureanswer={Lectureanswer}\r\n                Lecturequiztime={Lecturequiztime}\r\n                setQurrentnumber={setQurrentnumber}\r\n                Lecturequizlist={Lecturequizlist}\r\n                Qurrentnumber={Qurrentnumber}\r\n                setLecturequizlist={setLecturequizlist}\r\n              />\r\n            </Th>\r\n            <Th align=\"center\" width=\"5%\">\r\n              <IconButton\r\n                id={item.id}\r\n                aria-label=\"Add to friends\"\r\n                icon={<DeleteIcon />}\r\n                onClick={onClickRemove}\r\n              />\r\n            </Th>\r\n          </Tr>\r\n        </Tbody>\r\n      </Table>\r\n    );\r\n  });\r\n  const showQuizhead = Lecturequizhead.map((item: any) => {\r\n    return (\r\n      <Table variant=\"simple\">\r\n        <Thead>\r\n          <Tr align=\"left\">\r\n            <Th align=\"left\" width=\"5%\">\r\n              {item.id}\r\n            </Th>\r\n            <Th align=\"left\" width=\"15%\">\r\n              {item.title}\r\n            </Th>\r\n            <Th align=\"left\" width=\"10%\">\r\n              {item.quiztime}\r\n            </Th>\r\n            <Th align=\"left\" width=\"15%\">\r\n              {item.problem}\r\n            </Th>\r\n            <Th align=\"left\" width=\"5%\">\r\n              {item.answer}\r\n            </Th>\r\n            <Th align=\"center\" width=\"5%\">\r\n              Add\r\n            </Th>\r\n            <Th align=\"center\" width=\"5%\">\r\n              Remove\r\n            </Th>\r\n          </Tr>\r\n        </Thead>\r\n      </Table>\r\n    );\r\n  });\r\n  return (\r\n    <>\r\n      <Stack spacing=\"24px\">\r\n        <Center bg=\"black\" h=\"100px\" color=\"white\" fontSize=\"2xl\">\r\n          Create Lecture\r\n        </Center>\r\n        <LectureTitle onChangeLecturetitle={onChangeLectureTitle} />\r\n        <LectureNotice onChangeLectureNotice={onChangeLectureNotice} />\r\n        <LectureTime\r\n          lectureDate={lectureDate}\r\n          setLectureDate={setLectureDate}\r\n        />\r\n        <AddPlayList\r\n          Lecturequizlist={Lecturequizlist}\r\n          onChangeLecturePlaylist={onChangeLecturePlaylist}\r\n          Lecturelink={lecturePlaylist}\r\n          setLecturequizlist={setLecturequizlist}\r\n        />\r\n        <Heading size=\"md\" pl=\"30px\">\r\n          Quiz List\r\n        </Heading>\r\n        <ol>{showQuizhead}</ol>\r\n        <ol>{showQuiz}</ol>\r\n      </Stack>\r\n      <br />\r\n      <br />\r\n      <br />\r\n      <Flex>\r\n        <Spacer />\r\n        <Button\r\n          leftIcon={<CheckIcon />}\r\n          colorScheme=\"blue\"\r\n          mr={3}\r\n          w={150}\r\n          h={50}\r\n          onClick={onChangeCreate}\r\n        >\r\n          Create Lecture\r\n        </Button>\r\n        <Button\r\n          leftIcon={<CloseIcon />}\r\n          colorScheme=\"red\"\r\n          mr={50}\r\n          w={150}\r\n          h={50}\r\n          onClick={() => navigate(-1)}\r\n        >\r\n          Cancel\r\n        </Button>\r\n      </Flex>\r\n      <br />\r\n    </>\r\n  );\r\n};\r\n\r\nexport default AddLecturePage;\r\n","import React from 'react';\r\nimport { BrowserRouter as Router, Routes, Route } from 'react-router-dom';\r\nimport LoginModal from './components/loginModal';\r\nimport { SocketProvider } from './context/socket';\r\nimport ClassPage from './pages/classPage';\r\nimport LecturePage from './pages/lecturePage';\r\nimport LobbyPage from './pages/lobbyPage';\r\nimport AddLecturePage from './components/classroomPage/AddLecturePage';\r\n\r\nconst App = (): React.ReactElement<any, any> => {\r\n  return (\r\n    <div className=\"App\">\r\n      <SocketProvider url=\"http://ec2-52-78-126-119.ap-northeast-2.compute.amazonaws.com/\">\r\n        <LoginModal />\r\n        <Router>\r\n          <Routes>\r\n            <Route path=\"/\" element={<LobbyPage />} />\r\n            <Route\r\n              path=\"class/:classUuid/:memberType\"\r\n              element={<ClassPage />}\r\n            />\r\n            <Route\r\n              path=\"class/:classUuid/:memberType/createLecture\"\r\n              element={<AddLecturePage />}\r\n            />\r\n            <Route\r\n              path=\"class/:classUuid/:memberType/:lectureId\"\r\n              element={<LecturePage />}\r\n            />\r\n          </Routes>\r\n        </Router>\r\n      </SocketProvider>\r\n    </div>\r\n  );\r\n};\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://cra.link/PWA\r\n\r\n/* eslint-disable */\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\ntype Config = {\r\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\r\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\r\n};\r\n\r\nexport function register(config?: Config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://cra.link/PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl: string, config?: Config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://cra.link/PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' }\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import { ReportHandler } from 'web-vitals';\r\n\r\nconst reportWebVitals = (onPerfEntry?: ReportHandler): void => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import React, { useState, useEffect } from 'react';\r\nimport { UserLoadStatus } from '../../types';\r\n\r\nimport UserContext from './userContext';\r\n\r\nconst UserProvider = ({ children }: React.PropsWithChildren<unknown>) => {\r\n  const [userName, setUserName] = useState('');\r\n  const [status, setUserStatus] = useState(UserLoadStatus.LOADING);\r\n  const [id, setId] = useState(-1);\r\n\r\n  useEffect(() => {\r\n    if (status === UserLoadStatus.LOADING) {\r\n      fetch(\r\n        'http://ec2-13-209-17-49.ap-northeast-2.compute.amazonaws.com/api/me',\r\n        {\r\n          method: 'GET'\r\n        }\r\n      )\r\n        .then(r => r.json())\r\n        .then(r => {\r\n          if (r.status === 401) {\r\n            setUserStatus(UserLoadStatus.NOTLOADED);\r\n          } else if (r.status === 200) {\r\n            console.log('Logged IN');\r\n            setUserName(r.userName);\r\n            setId(r.id);\r\n            setUserStatus(UserLoadStatus.LOADED);\r\n          }\r\n        })\r\n        .catch(e => console.error(e));\r\n    }\r\n  }, []);\r\n\r\n  return (\r\n    <UserContext.Provider value={{ userName, status, id }}>\r\n      {children}\r\n    </UserContext.Provider>\r\n  );\r\n};\r\n\r\nexport default UserProvider;\r\n","import React, { useState } from 'react';\r\nimport lectureContext from './lectureContext';\r\n\r\nconst langProvider = ({ children }: React.PropsWithChildren<unknown>) => {\r\n  const [selectedVidIdx, setSelectedVidIdx] = useState<number>(0);\r\n  const [isLive, setIsLive] = useState<boolean>(false);\r\n\r\n  return (\r\n    <lectureContext.Provider\r\n      value={{ isLive, setIsLive, selectedVidIdx, setSelectedVidIdx }}\r\n    >\r\n      {children}\r\n    </lectureContext.Provider>\r\n  );\r\n};\r\n\r\nexport default langProvider;\r\n","import React, { useState } from 'react';\r\nimport langContext from './languageContext';\r\nimport { LanguageType } from '../../types';\r\n\r\nconst langProvider = ({ children }: React.PropsWithChildren<unknown>) => {\r\n  const [language, setLanguage] = useState<LanguageType>(LanguageType.KO);\r\n\r\n  return (\r\n    <langContext.Provider value={{ language, setLanguage }}>\r\n      {children}\r\n    </langContext.Provider>\r\n  );\r\n};\r\n\r\nexport default langProvider;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport { ChakraProvider } from '@chakra-ui/react';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorkerRegistration from './serviceWorkerRegistration';\r\nimport reportWebVitals from './reportWebVitals';\r\nimport UserProvider from './context/user/userProvider';\r\nimport LectureProvider from './context/lecture/lectureProvider';\r\nimport LangProvider from './context/language/languageProvider';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <ChakraProvider>\r\n      <UserProvider>\r\n        <LectureProvider>\r\n          <LangProvider>\r\n            <App />\r\n          </LangProvider>\r\n        </LectureProvider>\r\n      </UserProvider>\r\n    </ChakraProvider>\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://cra.link/PWA\r\nserviceWorkerRegistration.unregister();\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}